<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>密码的练习</title>
    <url>/2020/08/20/%E5%AF%86%E7%A0%81%E7%9A%84%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码不正确，请重新输入！" data-whm="文章不能被校验, 不过您还是能看看解密后的内容！">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">该文章已加密，请输入密码查看！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="c17e66e2e22db6ced5f315515f5b516d4836fc5ca50b380a912f99eeb911c6eb">d02bc9ab31a96c111d211af215126b4b00d5b5d382309c6bbec870b7b7b01f5360e957c1257aedcaa1b79a3bf49d71179548686e10bc96d8e3b6b6cce0eb3c23f818293ee3240606bf58bd6d30b5878611422e0eff874bcd8c42e157c64967615f0a38a300f041771a4577bdb32f59e56e2890845b767c591e4f33b280663c71f7f0f8b192da993e856db17207afeb533f0fa488909952a9df367515015aa506d63d8f55de4906c9f95fab420a677979478b46c6aae893f5d8c4c04c800aad6996b0e581e3a1cf89a4a2c0bcc70bc81886369b1bcc160d2e8986d7f46d08215adcd3973b8036119a3b29741d6e6c5157823d69ae8a1d9f73f6a015f2ccaeb74a51dabf5e3796486c42becfc97747b56e33eccc4b4571dec702403689b985024270e66b04eef1ce2c951baf47527ac24f327b4adffceee0becbde5e28ad5ace97fa5922ef69ceb9cdd1688fc42f7d0353cb65a05f2d3348eb7cf78410943bd606c57da4120f8c7cdaf1d3cc3aad222ea77722d6630ec6cb93c534668a8bc34a0bb92f710af3ff26908cc4670998cb6c846e516d295726d473e6dbaca9cbaf3dd24fa6ac730474b38496be3f6273932fff4440cb1ad9b62c831038ca4b2f9341e4a9457c14181e108758395927afc33eb9ad48c34fcb0c571467db5e574c0b794d14bee527de23e4bb470adf33e115d8a24795c5ccc93f46acc4f93e4a6fa1a51e7ef1774b31716c6c534e26a4fe432913b1dc319764445d5738cc6ef6ff31a5906c537f4b959246f572dcc096ba543c631265dde0f65f70a59038e97fe31c6f29e9e24ba6b76c31191054b757abce9757d33345a7142e02d48cf992031421be943174bc769920444239ba7f5750794d33ce47f70424101cc7304f4d17e4768ee8aa78d3d48766db54ff5c5bb0683047d6</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>练习</category>
      </categories>
      <tags>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次使用</title>
    <url>/2020/06/25/%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/</url>
    <content><![CDATA[<p> 第一次用，实验看看能不能成功……<br> <img src="/2020/06/25/%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/abc.jpg" alt></p>
]]></content>
      <categories>
        <category>练习</category>
      </categories>
      <tags>
        <tag>随手乱写</tag>
      </tags>
  </entry>
  <entry>
    <title>算法排序的收集</title>
    <url>/2020/08/16/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p><font color="LightSkyBlue">#一些术语</font></p>
<ul>
<li>稳定 ：如果a原本在b前面，而a=b，排序之后a仍然在b的前面</li>
<li>不稳定 ：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面</li>
<li>内排序 ：所有排序操作都在内存中完成</li>
<li>外排序 ：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li>
<li>时间复杂度 ： 一个算法执行所耗费的时间；</li>
<li>空间复杂度 ：运行完一个程序所需内存的大小；</li>
<li>n: 数据规模</li>
<li>k: “桶”的个数</li>
<li>In-place: 占用常数内存，不占用额外内存</li>
<li>Out-place: 占用额外内存<a id="more"></a>

</li>
</ul>
<p><font color="LightSkyBlue">#1.冒泡排序（Bubble Sort）</font><br>时间复杂度：O（n）【最好】——O（n^2）【最坏】，空间复杂度：O（1），排序方式：In-place，稳定；<br>属于内部排序的交换排序。<br>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。<br>##描述：</p>
<ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>
<li>针对所有的元素重复以上的步骤，除了最后一个；</li>
<li>重复步骤1~3，直到排序完成。<br><img src="/2020/08/16/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt><br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function bubbleSort(arr) &#123;</span><br><span class="line">    var len &#x3D; arr.length;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        for (var j &#x3D; 0; j &lt; len - 1 - i; j++) &#123;</span><br><span class="line">            if (arr[j] &gt; arr[j+1]) &#123;        &#x2F;&#x2F; 相邻元素两两对比</span><br><span class="line">                var temp &#x3D; arr[j+1];        &#x2F;&#x2F; 元素交换</span><br><span class="line">                arr[j+1] &#x3D; arr[j];</span><br><span class="line">                arr[j] &#x3D; temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] bubbleSort(int[] array) &#123;</span><br><span class="line">    if (array.length &#x3D;&#x3D; 0)</span><br><span class="line">        return array;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; array.length; i++)</span><br><span class="line">        for (int j &#x3D; 0; j &lt; array.length - 1 - i; j++)</span><br><span class="line">            if (array[j + 1] &lt; array[j]) &#123;</span><br><span class="line">                int temp &#x3D; array[j + 1];</span><br><span class="line">                array[j + 1] &#x3D; array[j];</span><br><span class="line">                array[j] &#x3D; temp;</span><br><span class="line">            &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><font color="LightSkyBlue">#2.选择排序（Selection Sort）</font><br>时间复杂度：O（n^2）【最好】——O（n^2）【最坏】，空间复杂度：O（1），排序方式：In-place，不稳定<br>属于内部排序。<br>选择排序是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。<br>##描述：<br>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p>
<ul>
<li>初始状态：无序区为R[1..n]，有序区为空；</li>
<li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li>
<li>n-1趟结束，数组有序化了。<br><img src="/2020/08/16/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt><br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function selectionSort(arr) &#123;</span><br><span class="line">    var len &#x3D; arr.length;</span><br><span class="line">    var minIndex, temp;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        minIndex &#x3D; i;</span><br><span class="line">        for (var j &#x3D; i + 1; j &lt; len; j++) &#123;</span><br><span class="line">            if (arr[j] &lt; arr[minIndex]) &#123;     &#x2F;&#x2F; 寻找最小的数</span><br><span class="line">                minIndex &#x3D; j;                 &#x2F;&#x2F; 将最小数的索引保存</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp &#x3D; arr[i];</span><br><span class="line">        arr[i] &#x3D; arr[minIndex];</span><br><span class="line">        arr[minIndex] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] selectionSort(int[] array) &#123;</span><br><span class="line">    if (array.length &#x3D;&#x3D; 0)</span><br><span class="line">        return array;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; array.length; i++) &#123;</span><br><span class="line">        int minIndex &#x3D; i;</span><br><span class="line">        for (int j &#x3D; i; j &lt; array.length; j++) &#123;</span><br><span class="line">            if (array[j] &lt; array[minIndex]) &#x2F;&#x2F;找到最小的数</span><br><span class="line">                minIndex &#x3D; j; &#x2F;&#x2F;将最小数的索引保存</span><br><span class="line">        &#125;</span><br><span class="line">        int temp &#x3D; array[minIndex];</span><br><span class="line">        array[minIndex] &#x3D; array[i];</span><br><span class="line">        array[i] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</li>
</ul>
<p><font color="LightSkyBlue">#3.插入排序（Insertion Sort）</font><br>时间复杂度：O（n）【最好】——O（n^2）【最坏】，空间复杂度：O（1），排序方式：In-place，稳定<br>属于内部排序。<br>插入排序的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。<br>##描述：<br>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>
<ul>
<li>从第一个元素开始，该元素可以认为已经被排序；</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li>
<li>将新元素插入到该位置后；</li>
<li>重复步骤2~5。<br><img src="/2020/08/16/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt><br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function insertionSort(arr) &#123;</span><br><span class="line">    var len &#x3D; arr.length;</span><br><span class="line">    var preIndex, current;</span><br><span class="line">    for (var i &#x3D; 1; i &lt; len; i++) &#123;</span><br><span class="line">        preIndex &#x3D; i - 1;</span><br><span class="line">        current &#x3D; arr[i];</span><br><span class="line">        while (preIndex &gt;&#x3D; 0 &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">            arr[preIndex + 1] &#x3D; arr[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex + 1] &#x3D; current;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] insertionSort(int[] array) &#123;</span><br><span class="line">    if (array.length &#x3D;&#x3D; 0)</span><br><span class="line">        return array;</span><br><span class="line">    int current;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; array.length - 1; i++) &#123;</span><br><span class="line">        current &#x3D; array[i + 1];</span><br><span class="line">        int preIndex &#x3D; i;</span><br><span class="line">        while (preIndex &gt;&#x3D; 0 &amp;&amp; current &lt; array[preIndex]) &#123;</span><br><span class="line">            array[preIndex + 1] &#x3D; array[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        array[preIndex + 1] &#x3D; current;</span><br><span class="line">    &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</li>
</ul>
<p><font color="LightSkyBlue">#4.希尔排序（Shell Sort）</font><br>时间复杂度：O（n log^2 n）【最好】——O（n log^2 n）【最好】，空间复杂度：O（1）；排序方式：In-place，不稳定<br>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。<br>##描述：<br>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>
<ul>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li>
<li>按增量序列个数k，对序列进行k 趟排序；</li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。<br><img src="/2020/08/16/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F2.gif" alt><br><img src="/2020/08/16/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.png" alt><br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function shellSort(arr) &#123;</span><br><span class="line">    var len &#x3D; arr.length;</span><br><span class="line">    for (var gap &#x3D; Math.floor(len &#x2F; 2); gap &gt; 0; gap &#x3D; Math.floor(gap &#x2F; 2)) &#123;</span><br><span class="line">        &#x2F;&#x2F; 注意：这里和动图演示的不一样，动图是分组执行，实际操作是多个分组交替执行</span><br><span class="line">        for (var i &#x3D; gap; i &lt; len; i++) &#123;</span><br><span class="line">            var j &#x3D; i;</span><br><span class="line">            var current &#x3D; arr[i];</span><br><span class="line">            while (j - gap &gt;&#x3D; 0 &amp;&amp; current &lt; arr[j - gap]) &#123;</span><br><span class="line">                 arr[j] &#x3D; arr[j - gap];</span><br><span class="line">                 j &#x3D; j - gap; </span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] &#x3D; current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] ShellSort(int[] array) &#123;</span><br><span class="line">    int len &#x3D; array.length;</span><br><span class="line">    int temp, gap &#x3D; len &#x2F; 2;</span><br><span class="line">    while (gap &gt; 0) &#123;</span><br><span class="line">        for (int i &#x3D; gap; i &lt; len; i++) &#123;</span><br><span class="line">            temp &#x3D; array[i];</span><br><span class="line">            int preIndex &#x3D; i - gap;</span><br><span class="line">            while (preIndex &gt;&#x3D; 0 &amp;&amp; array[preIndex] &gt; temp) &#123;</span><br><span class="line">                array[preIndex + gap] &#x3D; array[preIndex];</span><br><span class="line">                preIndex -&#x3D; gap;</span><br><span class="line">            &#125;</span><br><span class="line">            array[preIndex + gap] &#x3D; temp;</span><br><span class="line">        &#125;</span><br><span class="line">        gap &#x2F;&#x3D; 2;</span><br><span class="line">    &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的。</li>
</ul>
<p><font color="LightSkyBlue">#5.归并排序（Merge Sort）</font><br>时间复杂度：O（n log n）【最好】——O（n log n）【最好】，空间复杂度：O（n）；排序方式：Out-place，稳定<br>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。<br>##描述：</p>
<ul>
<li>把长度为n的输入序列分成两个长度为n/2的子序列；</li>
<li>对这两个子序列分别采用归并排序；</li>
<li>将两个排序好的子序列合并成一个最终的排序序列。<br><img src="/2020/08/16/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif" alt><br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function mergeSort(arr) &#123;</span><br><span class="line">    var len &#x3D; arr.length;</span><br><span class="line">    if (len &lt; 2) &#123;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">    var middle &#x3D; Math.floor(len &#x2F; 2),</span><br><span class="line">        left &#x3D; arr.slice(0, middle),</span><br><span class="line">        right &#x3D; arr.slice(middle);</span><br><span class="line">    return merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function merge(left, right) &#123;</span><br><span class="line">    var result &#x3D; [];</span><br><span class="line"> </span><br><span class="line">    while (left.length&gt;0 &amp;&amp; right.length&gt;0) &#123;</span><br><span class="line">        if (left[0] &lt;&#x3D; right[0]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    while (left.length)</span><br><span class="line">        result.push(left.shift());</span><br><span class="line"> </span><br><span class="line">    while (right.length)</span><br><span class="line">        result.push(right.shift());</span><br><span class="line"> </span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] MergeSort(int[] array) &#123;</span><br><span class="line">    if (array.length &lt; 2) return array;</span><br><span class="line">    int mid &#x3D; array.length &#x2F; 2;</span><br><span class="line">    int[] left &#x3D; Arrays.copyOfRange(array, 0, mid);</span><br><span class="line">    int[] right &#x3D; Arrays.copyOfRange(array, mid, array.length);</span><br><span class="line">    return merge(MergeSort(left), MergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line">public static int[] merge(int[] left, int[] right) &#123;</span><br><span class="line">    int[] result &#x3D; new int[left.length + right.length];</span><br><span class="line">    for (int index &#x3D; 0, i &#x3D; 0, j &#x3D; 0; index &lt; result.length; index++) &#123;</span><br><span class="line">        if (i &gt;&#x3D; left.length)</span><br><span class="line">            result[index] &#x3D; right[j++];</span><br><span class="line">        else if (j &gt;&#x3D; right.length)</span><br><span class="line">            result[index] &#x3D; left[i++];</span><br><span class="line">        else if (left[i] &gt; right[j])</span><br><span class="line">            result[index] &#x3D; right[j++];</span><br><span class="line">        else</span><br><span class="line">            result[index] &#x3D; left[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。</li>
</ul>
<p><font color="LightSkyBlue">#6.快速排序（Quick Sort）</font><br>时间复杂度：O（n log n）【最好】——O（n^2）【最坏】，空间复杂度：O（log n），排序方式：In-place，不稳定<br>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。<br>##描述：<br>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p>
<ul>
<li>从数列中挑出一个元素，称为 “基准”（pivot）；</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。<br><img src="/2020/08/16/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt><br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function quickSort(arr, left, right) &#123;</span><br><span class="line">    var len &#x3D; arr.length,</span><br><span class="line">        partitionIndex,</span><br><span class="line">        left &#x3D; typeof left !&#x3D; &#39;number&#39; ? 0 : left,</span><br><span class="line">        right &#x3D; typeof right !&#x3D; &#39;number&#39; ? len - 1 : right;</span><br><span class="line"> </span><br><span class="line">    if (left &lt; right) &#123;</span><br><span class="line">        partitionIndex &#x3D; partition(arr, left, right);</span><br><span class="line">        quickSort(arr, left, partitionIndex-1);</span><br><span class="line">        quickSort(arr, partitionIndex+1, right);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function partition(arr, left ,right) &#123;     &#x2F;&#x2F; 分区操作</span><br><span class="line">    var pivot &#x3D; left,                      &#x2F;&#x2F; 设定基准值（pivot）</span><br><span class="line">        index &#x3D; pivot + 1;</span><br><span class="line">    for (var i &#x3D; index; i &lt;&#x3D; right; i++) &#123;</span><br><span class="line">        if (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">            swap(arr, i, index);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, pivot, index - 1);</span><br><span class="line">    return index-1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function swap(arr, i, j) &#123;</span><br><span class="line">    var temp &#x3D; arr[i];</span><br><span class="line">    arr[i] &#x3D; arr[j];</span><br><span class="line">    arr[j] &#x3D; temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] QuickSort(int[] array, int start, int end) &#123;</span><br><span class="line">    if (array.length &lt; 1 || start &lt; 0 || end &gt;&#x3D; array.length || start &gt; end) return null;</span><br><span class="line">    int smallIndex &#x3D; partition(array, start, end);</span><br><span class="line">    if (smallIndex &gt; start)</span><br><span class="line">        QuickSort(array, start, smallIndex - 1);</span><br><span class="line">    if (smallIndex &lt; end)</span><br><span class="line">        QuickSort(array, smallIndex + 1, end);</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br><span class="line">public static int partition(int[] array, int start, int end) &#123;</span><br><span class="line">    int pivot &#x3D; (int) (start + Math.random() * (end - start + 1));</span><br><span class="line">    int smallIndex &#x3D; start - 1;</span><br><span class="line">    swap(array, pivot, end);</span><br><span class="line">    for (int i &#x3D; start; i &lt;&#x3D; end; i++)</span><br><span class="line">        if (array[i] &lt;&#x3D; array[end]) &#123;</span><br><span class="line">            smallIndex++;</span><br><span class="line">            if (i &gt; smallIndex)</span><br><span class="line">                swap(array, i, smallIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    return smallIndex;</span><br><span class="line">&#125;</span><br><span class="line">public static void swap(int[] array, int i, int j) &#123;</span><br><span class="line">    int temp &#x3D; array[i];</span><br><span class="line">    array[i] &#x3D; array[j];</span><br><span class="line">    array[j] &#x3D; temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><font color="LightSkyBlue">#7.堆排序（Heap Sort）</font><br>时间复杂度：O（n log n）【最好】——O（n log n）【最坏】，空间复杂度：O（1），排序方式：In-place，不稳定<br>堆排序是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。<br>##描述：</p>
<ul>
<li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li>
<li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li>
<li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。<br><img src="/2020/08/16/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86/%E5%A0%86%E6%8E%92%E5%BA%8F.gif" alt><br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	var len;    &#x2F;&#x2F; 因为声明的多个函数都需要数据长度，所以把len设置成为全局变量 </span><br><span class="line">function buildMaxHeap(arr) &#123;   &#x2F;&#x2F; 建立大顶堆</span><br><span class="line">    len &#x3D; arr.length;</span><br><span class="line">    for (var i &#x3D; Math.floor(len&#x2F;2); i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">        heapify(arr, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function heapify(arr, i) &#123;     &#x2F;&#x2F; 堆调整</span><br><span class="line">    var left &#x3D; 2 * i + 1,</span><br><span class="line">        right &#x3D; 2 * i + 2,</span><br><span class="line">        largest &#x3D; i;</span><br><span class="line"> </span><br><span class="line">    if (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest &#x3D; left;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    if (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest &#x3D; right;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    if (largest !&#x3D; i) &#123;</span><br><span class="line">        swap(arr, i, largest);</span><br><span class="line">        heapify(arr, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function swap(arr, i, j) &#123;</span><br><span class="line">    var temp &#x3D; arr[i];</span><br><span class="line">    arr[i] &#x3D; arr[j];</span><br><span class="line">    arr[j] &#x3D; temp;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function heapSort(arr) &#123;</span><br><span class="line">    buildMaxHeap(arr);</span><br><span class="line"> </span><br><span class="line">    for (var i &#x3D; arr.length - 1; i &gt; 0; i--) &#123;</span><br><span class="line">        swap(arr, 0, i);</span><br><span class="line">        len--;</span><br><span class="line">        heapify(arr, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] HeapSort(int[] array) &#123;</span><br><span class="line">    len &#x3D; array.length;</span><br><span class="line">    if (len &lt; 1) return array;</span><br><span class="line">    &#x2F;&#x2F;1.构建一个最大堆</span><br><span class="line">    buildMaxHeap(array);</span><br><span class="line">    &#x2F;&#x2F;2.循环将堆首位（最大值）与末位交换，然后在重新调整最大堆</span><br><span class="line">    while (len &gt; 0) &#123;</span><br><span class="line">        swap(array, 0, len - 1);</span><br><span class="line">        len--;</span><br><span class="line">        adjustHeap(array, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br><span class="line">public static void buildMaxHeap(int[] array) &#123;</span><br><span class="line">    &#x2F;&#x2F;从最后一个非叶子节点开始向上构造最大堆</span><br><span class="line">    &#x2F;&#x2F;for循环这样写会更好一点：i的左子树和右子树分别2i+1和2(i+1)</span><br><span class="line">    for (int i &#x3D; (len&#x2F;2- 1); i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">        adjustHeap(array, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void adjustHeap(int[] array, int i) &#123;</span><br><span class="line">    int maxIndex &#x3D; i;</span><br><span class="line">    &#x2F;&#x2F;如果有左子树，且左子树大于父节点，则将最大指针指向左子树</span><br><span class="line">    if (i * 2 &lt; len &amp;&amp; array[i * 2] &gt; array[maxIndex])</span><br><span class="line">        maxIndex &#x3D; i * 2 + 1;</span><br><span class="line">    &#x2F;&#x2F;如果有右子树，且右子树大于父节点，则将最大指针指向右子树</span><br><span class="line">    if (i * 2 + 1 &lt; len &amp;&amp; array[i * 2 + 1] &gt; array[maxIndex])</span><br><span class="line">        maxIndex &#x3D; i * 2 + 2; </span><br><span class="line">    &#x2F;&#x2F;如果父节点不是最大值，则将父节点与最大值交换，并且递归调整与父节点交换的位置。</span><br><span class="line">    if (maxIndex !&#x3D; i) &#123;</span><br><span class="line">        swap(array, maxIndex, i);</span><br><span class="line">        adjustHeap(array, maxIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><font color="LightSkyBlue">#8.计数排序（Counting Sort）</font><br>时间复杂度：O（n+k）【最好】——O（n+k）【最坏】，空间复杂度：O（k），排序方式：Out-place，稳定<br>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。<br>##描述：</p>
<ul>
<li>找出待排序的数组中最大和最小的元素；</li>
<li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li>
<li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li>
<li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。<br><img src="/2020/08/16/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F.gif" alt><br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function countingSort(arr, maxValue) &#123;</span><br><span class="line">    var bucket &#x3D; new Array(maxValue + 1),</span><br><span class="line">        sortedIndex &#x3D; 0;</span><br><span class="line">        arrLen &#x3D; arr.length,</span><br><span class="line">        bucketLen &#x3D; maxValue + 1;</span><br><span class="line"> </span><br><span class="line">    for (var i &#x3D; 0; i &lt; arrLen; i++) &#123;</span><br><span class="line">        if (!bucket[arr[i]]) &#123;</span><br><span class="line">            bucket[arr[i]] &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        bucket[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    for (var j &#x3D; 0; j &lt; bucketLen; j++) &#123;</span><br><span class="line">        while(bucket[j] &gt; 0) &#123;</span><br><span class="line">            arr[sortedIndex++] &#x3D; j;</span><br><span class="line">            bucket[j]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] CountingSort(int[] array) &#123;</span><br><span class="line">        if (array.length &#x3D;&#x3D; 0) return array;</span><br><span class="line">        int bias, min &#x3D; array[0], max &#x3D; array[0];</span><br><span class="line">        for (int i &#x3D; 1; i &lt; array.length; i++) &#123;</span><br><span class="line">            if (array[i] &gt; max)</span><br><span class="line">                max &#x3D; array[i];</span><br><span class="line">            if (array[i] &lt; min)</span><br><span class="line">                min &#x3D; array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        bias &#x3D; 0 - min;</span><br><span class="line">        int[] bucket &#x3D; new int[max - min + 1];</span><br><span class="line">        Arrays.fill(bucket, 0);</span><br><span class="line">        for (int i &#x3D; 0; i &lt; array.length; i++) &#123;</span><br><span class="line">            bucket[array[i] + bias]++;</span><br><span class="line">        &#125;</span><br><span class="line">        int index &#x3D; 0, i &#x3D; 0;</span><br><span class="line">        while (index &lt; array.length) &#123;</span><br><span class="line">            if (bucket[i] !&#x3D; 0) &#123;</span><br><span class="line">                array[index] &#x3D; i - bias;</span><br><span class="line">                bucket[i]--;</span><br><span class="line">                index++;</span><br><span class="line">            &#125; else</span><br><span class="line">                i++;</span><br><span class="line">        &#125;</span><br><span class="line">        return array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
计数排序是一个稳定的排序算法。当输入的元素是 n 个 0到 k 之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。</li>
</ul>
<p><font color="LightSkyBlue">#9.桶排序（Bucket Sort）</font><br>时间复杂度：O（n+k）【最好】——O（n^2）【最坏】，空间复杂度：O（n+k），排序方式：Out-place，稳定<br>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。<br>##描述：</p>
<ul>
<li>设置一个定量的数组当作空桶；</li>
<li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li>
<li>对每个不是空的桶进行排序；</li>
<li>从不是空的桶里把排好序的数据拼接起来。<br><img src="/2020/08/16/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86/%E6%A1%B6%E6%8E%92%E5%BA%8F.png" alt><br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function bucketSort(arr, bucketSize) &#123;</span><br><span class="line">    if (arr.length &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">      return arr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    var i;</span><br><span class="line">    var minValue &#x3D; arr[0];</span><br><span class="line">    var maxValue &#x3D; arr[0];</span><br><span class="line">    for (i &#x3D; 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">      if (arr[i] &lt; minValue) &#123;</span><br><span class="line">          minValue &#x3D; arr[i];                &#x2F;&#x2F; 输入数据的最小值</span><br><span class="line">      &#125; else if (arr[i] &gt; maxValue) &#123;</span><br><span class="line">          maxValue &#x3D; arr[i];                &#x2F;&#x2F; 输入数据的最大值</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 桶的初始化</span><br><span class="line">    var DEFAULT_BUCKET_SIZE &#x3D; 5;            &#x2F;&#x2F; 设置桶的默认数量为5</span><br><span class="line">    bucketSize &#x3D; bucketSize || DEFAULT_BUCKET_SIZE;</span><br><span class="line">    var bucketCount &#x3D; Math.floor((maxValue - minValue) &#x2F; bucketSize) + 1;   </span><br><span class="line">    var buckets &#x3D; new Array(bucketCount);</span><br><span class="line">    for (i &#x3D; 0; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        buckets[i] &#x3D; [];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 利用映射函数将数据分配到各个桶中</span><br><span class="line">    for (i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        buckets[Math.floor((arr[i] - minValue) &#x2F; bucketSize)].push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    arr.length &#x3D; 0;</span><br><span class="line">    for (i &#x3D; 0; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        insertionSort(buckets[i]);                      &#x2F;&#x2F; 对每个桶进行排序，这里使用了插入排序</span><br><span class="line">        for (var j &#x3D; 0; j &lt; buckets[i].length; j++) &#123;</span><br><span class="line">            arr.push(buckets[i][j]);                      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static ArrayList&lt;Integer&gt; BucketSort(ArrayList&lt;Integer&gt; array, int bucketSize) &#123;</span><br><span class="line">        if (array &#x3D;&#x3D; null || array.size() &lt; 2)</span><br><span class="line">            return array;</span><br><span class="line">        int max &#x3D; array.get(0), min &#x3D; array.get(0);&#x2F;&#x2F; 找到最大值最小值</span><br><span class="line">        for (int i &#x3D; 0; i &lt; array.size(); i++) &#123;</span><br><span class="line">            if (array.get(i) &gt; max)</span><br><span class="line">                max &#x3D; array.get(i);</span><br><span class="line">            if (array.get(i) &lt; min)</span><br><span class="line">                min &#x3D; array.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        int bucketCount &#x3D; (max - min) &#x2F; bucketSize + 1;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketArr &#x3D; new ArrayList&lt;&gt;(bucketCount);</span><br><span class="line">        ArrayList&lt;Integer&gt; resultArr &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; bucketCount; i++) &#123;</span><br><span class="line">            bucketArr.add(new ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; array.size(); i++) &#123;</span><br><span class="line">            bucketArr.get((array.get(i) - min) &#x2F; bucketSize).add(array.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; bucketCount; i++) &#123;</span><br><span class="line">            if (bucketSize &#x3D;&#x3D; 1) &#123; &#x2F;&#x2F; 如果带排序数组中有重复数字时</span><br><span class="line">                for (int j &#x3D; 0; j &lt; bucketArr.get(i).size(); j++)</span><br><span class="line">                    resultArr.add(bucketArr.get(i).get(j));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (bucketCount &#x3D;&#x3D; 1)</span><br><span class="line">                    bucketSize--;</span><br><span class="line">                ArrayList&lt;Integer&gt; temp &#x3D; BucketSort(bucketArr.get(i), bucketSize);</span><br><span class="line">                for (int j &#x3D; 0; j &lt; temp.size(); j++)</span><br><span class="line">                    resultArr.add(temp.get(j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return resultArr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。 </p>
<p><font color="LightSkyBlue">#10.基数排序（Radix Sort）</font><br>时间复杂度：O（n<em>k）【最好】——O（n</em>2）【最坏】，空间复杂度：O（n+k），排序方式：Out-place，稳定<br>属于内部排序。<br>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。<br>##描述：</p>
<ul>
<li>取得数组中的最大数，并取得位数；</li>
<li>arr为原始数组，从最低位开始取每个位组成radix数组；</li>
<li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；<br><img src="/2020/08/16/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.gif" alt><br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	var counter &#x3D; [];</span><br><span class="line">function radixSort(arr, maxDigit) &#123;</span><br><span class="line">    var mod &#x3D; 10;</span><br><span class="line">    var dev &#x3D; 1;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; maxDigit; i++, dev *&#x3D; 10, mod *&#x3D; 10) &#123;</span><br><span class="line">        for(var j &#x3D; 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">            var bucket &#x3D; parseInt((arr[j] % mod) &#x2F; dev);</span><br><span class="line">            if(counter[bucket]&#x3D;&#x3D;null) &#123;</span><br><span class="line">                counter[bucket] &#x3D; [];</span><br><span class="line">            &#125;</span><br><span class="line">            counter[bucket].push(arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        var pos &#x3D; 0;</span><br><span class="line">        for(var j &#x3D; 0; j &lt; counter.length; j++) &#123;</span><br><span class="line">            var value &#x3D; null;</span><br><span class="line">            if(counter[j]!&#x3D;null) &#123;</span><br><span class="line">                while ((value &#x3D; counter[j].shift()) !&#x3D; null) &#123;</span><br><span class="line">                      arr[pos++] &#x3D; value;</span><br><span class="line">                &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.	public static int[] RadixSort(int[] array) &#123;</span><br><span class="line">	        if (array &#x3D;&#x3D; null || array.length &lt; 2)</span><br><span class="line">	            return array;</span><br><span class="line">	        &#x2F;&#x2F; 1.先算出最大数的位数；</span><br><span class="line">	        int max &#x3D; array[0];</span><br><span class="line">	        for (int i &#x3D; 1; i &lt; array.length; i++) &#123;</span><br><span class="line">	            max &#x3D; Math.max(max, array[i]);</span><br><span class="line">	        &#125;</span><br><span class="line">	        int maxDigit &#x3D; 0;</span><br><span class="line">	        while (max !&#x3D; 0) &#123;</span><br><span class="line">	            max &#x2F;&#x3D; 10;</span><br><span class="line">	            maxDigit++;</span><br><span class="line">	        &#125;</span><br><span class="line">	        int mod &#x3D; 10, div &#x3D; 1;</span><br><span class="line">	        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketList &#x3D; new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">	        for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">	            bucketList.add(new ArrayList&lt;Integer&gt;());</span><br><span class="line">	        for (int i &#x3D; 0; i &lt; maxDigit; i++, mod *&#x3D; 10, div *&#x3D; 10) &#123;</span><br><span class="line">	            for (int j &#x3D; 0; j &lt; array.length; j++) &#123;</span><br><span class="line">	                int num &#x3D; (array[j] % mod) &#x2F; div;</span><br><span class="line">	                bucketList.get(num).add(array[j]);</span><br><span class="line">	            &#125;</span><br><span class="line">	            int index &#x3D; 0;</span><br><span class="line">	            for (int j &#x3D; 0; j &lt; bucketList.size(); j++) &#123;</span><br><span class="line">	                for (int k &#x3D; 0; k &lt; bucketList.get(j).size(); k++)</span><br><span class="line">	                    array[index++] &#x3D; bucketList.get(j).get(k);</span><br><span class="line">	                bucketList.get(j).clear();</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;</span><br><span class="line">	        return array;</span><br><span class="line">	    &#125;</span><br></pre></td></tr></table></figure>
基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n) ，当然d要远远小于n，因此基本上还是线性级别的。<br>基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n&gt;&gt;k，因此额外空间需要大概n个左右。</li>
</ul>
<p><a href="https://www.bilibili.com/video/BV1bg4y1q7es?from=search&seid=14943951038373601434" target="_blank" rel="noopener">B站排序算法可视化→</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>算法排序的收集（三）</title>
    <url>/2020/08/18/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p><font color="LightSkyBlue">非十大排序（三）</font></p>
<ul>
<li>稳定 ：如果a原本在b前面，而a=b，排序之后a仍然在b的前面</li>
<li>不稳定 ：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面</li>
<li>内排序 ：所有排序操作都在内存中完成</li>
<li>外排序 ：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li>
<li>时间复杂度 ： 一个算法执行所耗费的时间；</li>
<li>空间复杂度 ：运行完一个程序所需内存的大小；</li>
<li>n: 数据规模</li>
<li>k: “桶”的个数</li>
<li>In-place: 占用常数内存，不占用额外内存</li>
<li>Out-place: 占用额外内存<a id="more"></a>

</li>
</ul>
<p><font color="LightSkyBlue">#16.鸡尾酒排序（Cocktail Ordering）</font><br>鸡尾酒排序，也叫定向冒泡排序，是冒泡排序的一种改进。此算法与冒泡排序的不同之处在于从低到高排然后从高到低，而冒泡排序则仅从低到高去比较序列中的每个元素，可以得到比冒泡排序稍微好一点的效能。<br>最差时间复杂度O(n^2)<br>最优时间复杂度-如果序列在一开始已经大部分排列过的话，会接近o(n)<br>平均复杂度-o(n^2)<br>稳定排序<br>##C++代码实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line"> </span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">const int maxn&#x3D;10;</span><br><span class="line"> </span><br><span class="line">int n,s[maxn];</span><br><span class="line"> </span><br><span class="line">void Cocktailsort()</span><br><span class="line">&#123;</span><br><span class="line">    int left&#x3D;0;</span><br><span class="line">    int right&#x3D;n-1;</span><br><span class="line">    while(left&lt;right)&#123;</span><br><span class="line">        &#x2F;&#x2F;前半轮，将最大元素放到后面</span><br><span class="line">        for(int i&#x3D;left;i&lt;right;i++)&#123;</span><br><span class="line">            if(s[i]&gt;s[i+1])&#123;</span><br><span class="line">                swap(s[i],s[i+1]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        right--;</span><br><span class="line">        &#x2F;&#x2F;后半轮，将最小元素放到前面</span><br><span class="line">        for(int i&#x3D;right;i&gt;left;i--)&#123;</span><br><span class="line">            if(s[i]&lt;s[i-1])&#123;</span><br><span class="line">                swap(s[i],s[i-1]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Cocktailsort();</span><br><span class="line">    for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">        printf(&quot;%d &quot;,s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="LightSkyBlue">#17.图书馆排序</font><br>##特色：<br>Library sort优于传统的插入排序（时间复杂度为O(n^2))，它的时间复杂度为O（nlogn），采用了空间换时间的策略。<br>##思想：<br>一个图书管理员需要按照字母顺序放置书本，当在书本之间留有一定空隙时，一本新书上架将无需移动随后的书本，可以直接插空隙。Library sort的思想就源于此。<br>##实现：有n个元素待排序，这些元素被插入到拥有(1+e)n个元素的数组中。每次插入2^(i-1)个元素，总共需要插logn趟。这2^(i-1)个元 素将被折半插入到已有的2^(i-1)个元素中。因此，插入i趟之后，已有2^i个元素插入数组中。此时，执行rebalance操作，原有处在(1+ e)2^i个位置的元素将被扩展到(2+2e)2^i个位置。这样，在做插入时，由于存在gap，因此在gap未满之前无需移动元素。</p>
<ul>
<li>最好时间复杂度　　O(nlogn)</li>
<li>平均时间复杂度　　O(nlogn)</li>
<li>最坏时间复杂度　　O(n^2)</li>
<li>空间复杂度　　　　O(n)</li>
<li>是否稳定　　　　　是<br>Library Sort基于折半查找的插入排序，插入时在元素附近空出一定位置，这样推入后移动元素的复杂度由原来的O(n)下降为平均O(1)，于是整个算法的复杂度达到O(nlogn)。当输入正序或倒序时，插入点都在同一位置，“留空位”的策略失效，这时就出现最坏复杂度O(n^2)。<br>##代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void librarySort(int length,float factor,int elements[])&#123;</span><br><span class="line"> int i,j;</span><br><span class="line"> &#x2F;&#x2F;扩展后的数组长度</span><br><span class="line"> int expandedLen &#x3D; (int)((1+factor)*length);</span><br><span class="line"> int* orderedElem &#x3D; (int*) malloc(expandedLen*sizeof(int));</span><br><span class="line">  </span><br><span class="line"> &#x2F;&#x2F;标志gap</span><br><span class="line"> int flag &#x3D; 1&lt;&lt;31;</span><br><span class="line"> for(i&#x3D;0;i&lt;expandedLen;i++)&#123;</span><br><span class="line">  orderedElem[i] &#x3D; flag;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> int index &#x3D; 1;</span><br><span class="line"> int numOfIntercalatedElem &#x3D; 1;</span><br><span class="line"> orderedElem[0] &#x3D; elements[0];</span><br><span class="line">  </span><br><span class="line"> while(length&gt;numOfIntercalatedElem)&#123;</span><br><span class="line">  &#x2F;&#x2F;第i次插入2^(i-1)个元素</span><br><span class="line">  for(j&#x3D;0;j&lt;numOfIntercalatedElem;j++)&#123;</span><br><span class="line">   &#x2F;&#x2F;待插入元素为elements[index]   </span><br><span class="line">   &#x2F;&#x2F;------------折半插入---------------</span><br><span class="line">   int mid;</span><br><span class="line">   int low &#x3D; 0;</span><br><span class="line">   int high &#x3D; 2 * numOfIntercalatedElem - 1;</span><br><span class="line">   while(low &lt;&#x3D; high)&#123;</span><br><span class="line">    mid &#x3D; (low + high)&#x2F;2;</span><br><span class="line">    </span><br><span class="line">    int savedMid &#x3D; mid;</span><br><span class="line">    &#x2F;&#x2F;如果mid所在位置为gap</span><br><span class="line">    while(orderedElem[mid] &#x3D;&#x3D; flag)&#123;     </span><br><span class="line">     if(mid &#x3D;&#x3D; high)&#123;</span><br><span class="line">      &#x2F;&#x2F;当向右遍历没有找到元素值时，改成向左遍历</span><br><span class="line">      mid &#x3D; savedMid - 1;</span><br><span class="line">      while(orderedElem[mid] &#x3D;&#x3D; flag)&#123;</span><br><span class="line">       mid--;</span><br><span class="line">      &#125;</span><br><span class="line">      break;</span><br><span class="line">     &#125;</span><br><span class="line">     mid++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if(elements[index] &gt; orderedElem[mid])&#123;</span><br><span class="line">     low &#x3D; mid + 1;</span><br><span class="line">     &#x2F;&#x2F;缩小范围</span><br><span class="line">     while(orderedElem[low] &#x3D;&#x3D; flag)&#123;</span><br><span class="line">      low &#x3D; low+1;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">     high &#x3D; mid - 1;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;   </span><br><span class="line">   </span><br><span class="line">   &#x2F;&#x2F;把elements[index]插入到orderedElem[high+1]</span><br><span class="line">   &#x2F;&#x2F;当位置为空，没有存储元素值时...</span><br><span class="line">   if(orderedElem[high+1] &#x3D;&#x3D; flag)&#123;</span><br><span class="line">    orderedElem[high+1] &#x3D; elements[index];</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">    &#x2F;&#x2F;位置非空，首先往前挪动元素，如果前面已满，向后挪动元素</span><br><span class="line">    int temp &#x3D; high+1;</span><br><span class="line">    while(orderedElem[temp] !&#x3D; flag)&#123;</span><br><span class="line">     temp--;</span><br><span class="line">     if(temp &lt; 0)&#123;</span><br><span class="line">      temp &#x3D; high+1;</span><br><span class="line">      break;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;     </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;向后移动 </span><br><span class="line">    while(orderedElem[temp] !&#x3D;flag)&#123;</span><br><span class="line">     temp++;</span><br><span class="line">    &#125;     </span><br><span class="line">     </span><br><span class="line">    while(temp &lt; high)&#123;</span><br><span class="line">     orderedElem[temp] &#x3D; orderedElem[temp+1];</span><br><span class="line">     temp++;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    while(temp &gt; high+1)&#123;</span><br><span class="line">     orderedElem[temp] &#x3D; orderedElem[temp-1];</span><br><span class="line">     temp--;</span><br><span class="line">    &#125;   </span><br><span class="line">     </span><br><span class="line">    orderedElem[temp] &#x3D; elements[index];          </span><br><span class="line">   &#125;</span><br><span class="line">   &#x2F;&#x2F;--------------------------------- </span><br><span class="line">   index++;</span><br><span class="line">   if(index &#x3D;&#x3D; length)&#123;</span><br><span class="line">    break;</span><br><span class="line">   &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  numOfIntercalatedElem *&#x3D;2;</span><br><span class="line">  int generatedIndex;</span><br><span class="line">  &#x2F;&#x2F;Rebalance...</span><br><span class="line">  for(j&#x3D;numOfIntercalatedElem;j&gt;0;j--)&#123;</span><br><span class="line">   if(orderedElem[j] &#x3D;&#x3D; flag)&#123;</span><br><span class="line">    continue;</span><br><span class="line">   &#125;</span><br><span class="line">   &#x2F;&#x2F;原数组元素从i处移到2i处</span><br><span class="line">   generatedIndex &#x3D; j*2;</span><br><span class="line">   if(generatedIndex &gt;&#x3D; expandedLen)&#123;    </span><br><span class="line">    generatedIndex &#x3D; expandedLen - 1;</span><br><span class="line">    if(orderedElem[generatedIndex] !&#x3D; flag)&#123;</span><br><span class="line">     break;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;   </span><br><span class="line">   orderedElem[generatedIndex] &#x3D; orderedElem[j];</span><br><span class="line">   orderedElem[j] &#x3D; flag;</span><br><span class="line">  &#125;     </span><br><span class="line"> &#125;</span><br><span class="line"> &#x2F;&#x2F;测试输出</span><br><span class="line"> for(i&#x3D;0;i&lt;expandedLen;i++)&#123;</span><br><span class="line">  printf(&quot;%d\n&quot;,orderedElem[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><font color="LightSkyBlue">#18.臭皮匠排序（Stooge Sort）</font><br>一个递归排序算法。它的提出者称其为“一种漂亮的排序算法”，但显然大家并不这样认为，反而在这种算法原理上产生了不好的联想——这个算法由此得名。<br>其实这种排序算法虽然又慢又不实用，但它的思想的确是“极好的”。<br>有三个臭皮匠，而整个序列被他们等分成了三份，每一次排序第二个臭皮匠都会先威胁第一个臭皮匠交出所有的大数，并将较小的数强塞到他的手中（递归排序区间内前2/3的数）。之后第三个臭皮匠又对第二个臭皮匠做了同样的事情（再递归排序后2/3的数）。那么整个序列中的大数都到了第三个臭皮匠的手中。而第二个臭皮匠岂能善罢甘休，又将第一个臭皮匠痛扁了一顿，得到了剩余的较大的数（重复第一次排序）。而第一个臭皮匠只能拿着一堆小数感慨自己生不逢时……<br>##注：<br>在整个过程中，三个臭皮匠手中的数的数目不变。<br>在实际代码实现上，排序的最开始阶段我们需要判断如果这段区间的第一个数大于最后一个数，先将其互换位置，再进行三段排序。<br>总时间复杂度O(n^2.7)。<br>##C++代码实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.	inline void Stooge_Sort(int l,int r)</span><br><span class="line">2.	&#123;</span><br><span class="line">3.		if(a[r]&lt;a[l])</span><br><span class="line">4.			swap(a[l],a[r]);</span><br><span class="line">5.		if(r-l+1&gt;&#x3D;3)</span><br><span class="line">6.		&#123;</span><br><span class="line">7.			int t&#x3D;(r-l+1)&#x2F;3;</span><br><span class="line">8.			Stooge_Sort(l,r-t);</span><br><span class="line">9.			Stooge_Sort(l+t,r);</span><br><span class="line">10.			Stooge_Sort(l,r-t);</span><br><span class="line">11.		&#125;</span><br><span class="line">12.	&#125;</span><br></pre></td></tr></table></figure>

<p><font color="LightSkyBlue">#19. 鸽巢排序(Pigeonhole sort) </font></p>
<ul>
<li>类似于桶排序也类似于计数排序，创建很多鸽巢（参考桶）,鸽巢中存放各元素的出现次数，再根据次数排序。</li>
<li>时间复杂度：O(N+n)O(N+n)</li>
<li>空间复杂度：O(N+n)<br>##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package ttt;</span><br><span class="line"> </span><br><span class="line">public class PigeonholeSort &#123;</span><br><span class="line">	</span><br><span class="line">	static int[] pigeonSort(int[] unsorted)&#123;</span><br><span class="line">		&#x2F;&#x2F;获取数组中最大的数</span><br><span class="line">    	int m,maxNumber &#x3D; 0;</span><br><span class="line">    	maxNumber &#x3D; unsorted[0];</span><br><span class="line">    	for(m&#x3D;0; m&lt;unsorted.length; m++) &#123;</span><br><span class="line">    		if(unsorted[m]&gt;maxNumber)&#123;</span><br><span class="line">    			maxNumber &#x3D; unsorted[m];</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">		&#x2F;&#x2F;需要确认数组中最大数值</span><br><span class="line">		int[] lastSort &#x3D; new int[unsorted.length];</span><br><span class="line">        int[] pogeonHole &#x3D; new int[maxNumber + 1];</span><br><span class="line">        for (int item : unsorted)&#123;</span><br><span class="line">            pogeonHole[item]++;&#x2F;&#x2F;表示pogeonHole[item]值+1再放回原位</span><br><span class="line">        &#125;</span><br><span class="line">        int k&#x3D;0;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; pogeonHole.length; i++)&#123;</span><br><span class="line">            for (int j &#x3D; 0; j &lt; pogeonHole[i]; j++)&#123;</span><br><span class="line">            	lastSort[k] &#x3D; i;</span><br><span class="line">            	k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(lastSort.length);</span><br><span class="line">        return lastSort;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    	int []the_array &#x3D; &#123;10,1,18,30,23,12,7,5,18,17&#125;;</span><br><span class="line">        System.out.print(&quot;之前的排序：&quot;);</span><br><span class="line">        for(int i &#x3D; 0; i &lt; the_array.length; i++) &#123;</span><br><span class="line">            System.out.print(the_array[i] + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        int []result_array &#x3D; pigeonSort(the_array);</span><br><span class="line">        System.out.print(&quot;鸽巢排序：&quot;);</span><br><span class="line">        for(int i &#x3D; 0; i &lt; result_array.length; i++) &#123;</span><br><span class="line">            System.out.print(result_array[i] + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##C++代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># include &lt;cstdio&gt;</span><br><span class="line"># include &lt;cmath&gt;</span><br><span class="line"># include &lt;cstring&gt;</span><br><span class="line"># include &lt;algorithm&gt;</span><br><span class="line"># include &lt;climits&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N_MAX &#x3D; 100000, M_MAX &#x3D; 100000000;</span><br><span class="line"></span><br><span class="line">int n;</span><br><span class="line">int a[N_MAX + 10];</span><br><span class="line">int nest[M_MAX + 10];</span><br><span class="line"></span><br><span class="line">void pigeonSort()</span><br><span class="line">&#123;</span><br><span class="line">	int a_max &#x3D; INT_MIN, a_min &#x3D; INT_MAX;</span><br><span class="line">	for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;</span><br><span class="line">		a_max &#x3D; max(a[i], a_max);</span><br><span class="line">		a_min &#x3D; min(a[i], a_min);</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">		nest[a[i] - a_min]++;</span><br><span class="line">	int now &#x3D; 0;</span><br><span class="line">	for (int i &#x3D; a_min; i &lt;&#x3D; a_max; i++)</span><br><span class="line">		while (nest[i - a_min]--) a[++now] &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">	for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">		scanf(&quot;%d&quot;, &amp;a[i]);</span><br><span class="line">	pigeonSort();</span><br><span class="line">	for (int i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">		printf(&quot;%d &quot;, a[i]);</span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><font color="LightSkyBlue">#20. 耐心排序（Patience Sorting）</font><br>这个排序的关键在建桶和入桶规则上<br>建桶规则:如果没有桶,新建一个桶;如果不符合入桶规则那么新建一个桶<br>入桶规则:只要比桶里最上边的数字小即可入桶,如果有多个桶可入,那么按照从左到右的顺序入桶即可<br>##C代码实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line">int* patienceSort(int* arr,int size)&#123;</span><br><span class="line">	int decks[size][size],i,j,min,pickedRow;</span><br><span class="line"> </span><br><span class="line">	int *count &#x3D; (int*)calloc(sizeof(int),size),*sortedArr &#x3D; (int*)malloc(size*sizeof(int));</span><br><span class="line"> </span><br><span class="line">	for(i&#x3D;0;i&lt;size;i++)&#123;</span><br><span class="line">		for(j&#x3D;0;j&lt;size;j++)&#123;</span><br><span class="line">			if(count[j]&#x3D;&#x3D;0 || (count[j]&gt;0 &amp;&amp; decks[j][count[j]-1]&gt;&#x3D;arr[i]))&#123;</span><br><span class="line">				decks[j][count[j]] &#x3D; arr[i];</span><br><span class="line">				count[j]++;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	min &#x3D; decks[0][count[0]-1];</span><br><span class="line">	pickedRow &#x3D; 0;</span><br><span class="line"> </span><br><span class="line">	for(i&#x3D;0;i&lt;size;i++)&#123;</span><br><span class="line">		for(j&#x3D;0;j&lt;size;j++)&#123;</span><br><span class="line">			if(count[j]&gt;0 &amp;&amp; decks[j][count[j]-1]&lt;min)&#123;</span><br><span class="line">				min &#x3D; decks[j][count[j]-1];</span><br><span class="line">				pickedRow &#x3D; j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		sortedArr[i] &#x3D; min;</span><br><span class="line">		count[pickedRow]--;</span><br><span class="line"> </span><br><span class="line">		for(j&#x3D;0;j&lt;size;j++)</span><br><span class="line">			if(count[j]&gt;0)&#123;</span><br><span class="line">				min &#x3D; decks[j][count[j]-1];</span><br><span class="line">				pickedRow &#x3D; j;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	free(count);</span><br><span class="line">	free(decks);</span><br><span class="line"> </span><br><span class="line">	return sortedArr;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main(int argC,char* argV[])</span><br><span class="line">&#123;</span><br><span class="line">	int *arr, *sortedArr, i;</span><br><span class="line"> </span><br><span class="line">	if(argC&#x3D;&#x3D;0)</span><br><span class="line">		printf(&quot;Usage : %s &lt;integers to be sorted separated by space&gt;&quot;);</span><br><span class="line">	else&#123;</span><br><span class="line">		arr &#x3D; (int*)malloc((argC-1)*sizeof(int));</span><br><span class="line"> </span><br><span class="line">		for(i&#x3D;1;i&lt;&#x3D;argC;i++)</span><br><span class="line">			arr[i-1] &#x3D; atoi(argV[i]);</span><br><span class="line"> </span><br><span class="line">		sortedArr &#x3D; patienceSort(arr,argC-1);</span><br><span class="line"> </span><br><span class="line">		for(i&#x3D;0;i&lt;argC-1;i++)</span><br><span class="line">			printf(&quot;%d &quot;,sortedArr[i]);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>•<br>Java代码实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line"> </span><br><span class="line">public class PatienceSort &#123;</span><br><span class="line">    public static &lt;E extends Comparable&lt;? super E&gt;&gt; void sort (E[] n) &#123;</span><br><span class="line">        List&lt;Pile&lt;E&gt;&gt; piles &#x3D; new ArrayList&lt;Pile&lt;E&gt;&gt;();</span><br><span class="line">        &#x2F;&#x2F; sort into piles</span><br><span class="line">        for (E x : n) &#123;</span><br><span class="line">            Pile&lt;E&gt; newPile &#x3D; new Pile&lt;E&gt;();</span><br><span class="line">            newPile.push(x);</span><br><span class="line">            int i &#x3D; Collections.binarySearch(piles, newPile);</span><br><span class="line">            if (i &lt; 0) i &#x3D; ~i;</span><br><span class="line">            if (i !&#x3D; piles.size())</span><br><span class="line">                piles.get(i).push(x);</span><br><span class="line">            else</span><br><span class="line">                piles.add(newPile);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; priority queue allows us to retrieve least pile efficiently</span><br><span class="line">        PriorityQueue&lt;Pile&lt;E&gt;&gt; heap &#x3D; new PriorityQueue&lt;Pile&lt;E&gt;&gt;(piles);</span><br><span class="line">        for (int c &#x3D; 0; c &lt; n.length; c++) &#123;</span><br><span class="line">            Pile&lt;E&gt; smallPile &#x3D; heap.poll();</span><br><span class="line">            n[c] &#x3D; smallPile.pop();</span><br><span class="line">            if (!smallPile.isEmpty())</span><br><span class="line">                heap.offer(smallPile);</span><br><span class="line">        &#125;</span><br><span class="line">        assert(heap.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private static class Pile&lt;E extends Comparable&lt;? super E&gt;&gt; extends Stack&lt;E&gt; implements Comparable&lt;Pile&lt;E&gt;&gt; &#123;</span><br><span class="line">        public int compareTo(Pile&lt;E&gt; y) &#123; return peek().compareTo(y.peek()); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">	Integer[] a &#x3D; &#123;4, 65, 2, -31, 0, 99, 83, 782, 1&#125;;</span><br><span class="line">	sort(a);</span><br><span class="line">	System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Python代码实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from functools import total_ordering</span><br><span class="line">from bisect import bisect_left</span><br><span class="line">from heapq import merge</span><br><span class="line"> </span><br><span class="line">@total_ordering</span><br><span class="line">class Pile(list):</span><br><span class="line">    def __lt__(self, other): return self[-1] &lt; other[-1]</span><br><span class="line">    def __eq__(self, other): return self[-1] &#x3D;&#x3D; other[-1]</span><br><span class="line"> </span><br><span class="line">def patience_sort(n):</span><br><span class="line">    piles &#x3D; []</span><br><span class="line">    # sort into piles</span><br><span class="line">    for x in n:</span><br><span class="line">        new_pile &#x3D; Pile([x])</span><br><span class="line">        i &#x3D; bisect_left(piles, new_pile)</span><br><span class="line">        if i !&#x3D; len(piles):</span><br><span class="line">            piles[i].append(x)</span><br><span class="line">        else:</span><br><span class="line">            piles.append(new_pile)</span><br><span class="line"> </span><br><span class="line">    # use a heap-based merge to merge piles efficiently</span><br><span class="line">    n[:] &#x3D; merge(*[reversed(pile) for pile in piles])</span><br><span class="line"> </span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    a &#x3D; [4, 65, 2, -31, 0, 99, 83, 782, 1]</span><br><span class="line">    patience_sort(a)</span><br><span class="line">print a</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>Java</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>算法排序的收集（二）</title>
    <url>/2020/08/17/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p><font color="LightSkyBlue">非十大排序收集（二）</font></p>
<ul>
<li>稳定 ：如果a原本在b前面，而a=b，排序之后a仍然在b的前面</li>
<li>不稳定 ：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面</li>
<li>内排序 ：所有排序操作都在内存中完成</li>
<li>外排序 ：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li>
<li>时间复杂度 ： 一个算法执行所耗费的时间；</li>
<li>空间复杂度 ：运行完一个程序所需内存的大小；</li>
<li>n: 数据规模</li>
<li>k: “桶”的个数</li>
<li>In-place: 占用常数内存，不占用额外内存</li>
<li>Out-place: 占用额外内存<a id="more"></a>
<font color="LightSkyBlue">#11.睡眠排序（Sleep Sort）</font><br>排序算法一般是力求兼顾时间和空间的平衡，而睡眠排序算法却像是一个玩笑，当时间和空间两者消耗足够大，才能达到最终“精确”排序的目的。<br>基于根据CPU的调度算法实现。<br>我们要对一组数据进行排序，不能存在负数值，这个数是多大，那么就在线程里睡眠它的10倍时间（ms）再加10，不是睡眠和它的数值一样大的原因是，当数值太小时，误差太大，睡眠的时间不比输出的时间少，那么就会存在不正确的输出结果<br>##描述：<br>构造 n 个（n为待排序元素个数）线程（自定义），它们和这 n 个数一一对应。<br>初始化后，线程都按照指定的时间开始休眠，等休眠时间到了以后结束休眠，等被执行的时候输出它对应的数。<br>这样，最小的数对应的线程最早醒来，这个数最早被输出（理论上）。<br>等所有线程都结束休眠并被执行完成，排序就结束了。<br>注释：<br>[1] 当线程不太多的时候，基本可以认为它们是同时启动的。<br>[2] 主线程睡眠足够长时间，等所有Sleeper线程都执行完毕。可以把时间设成比最大输入稍大。<br>##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SleepSort &#123;  </span><br><span class="line">	</span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">    	</span><br><span class="line">        int[] arr &#x3D; &#123;1,4,7,3,8,9,2,6,5&#125;;</span><br><span class="line">        &#x2F;&#x2F;创建指定长度的线程数组</span><br><span class="line">        SortThread[] sortThreads &#x3D; new SortThread[arr.length];  </span><br><span class="line">        &#x2F;&#x2F;指定每个线程数组的值</span><br><span class="line">        for (int i &#x3D; 0; i &lt; sortThreads.length; i++) &#123;  </span><br><span class="line">            sortThreads[i] &#x3D; new SortThread(arr[i]);  </span><br><span class="line">        &#125; </span><br><span class="line">        &#x2F;&#x2F;开启每个线程</span><br><span class="line">        for (int i &#x3D; 0; i &lt; sortThreads.length; i++) &#123;  </span><br><span class="line">            sortThreads[i].start();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">class SortThread extends Thread&#123;  </span><br><span class="line">    int s &#x3D; 0;  </span><br><span class="line">    public SortThread(int s)&#123;  </span><br><span class="line">        this.s &#x3D; s;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public void run()&#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            sleep(s*10+10);  &#x2F;&#x2F;睡眠指定的时间</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;  </span><br><span class="line">              </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        &#x2F;&#x2F;输出该数</span><br><span class="line">        System.out.println(s);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##缺点：</li>
<li>当出现一个很大的数字，会睡眠很长时间（效率低）</li>
<li>当数字相差很小，会不精准（不精准）</li>
<li>不能处理负数（虽然可以在加上一个正数，再进行睡眠排序，但是得不偿失）</li>
<li>排序使用到了多线程，有点“杀鸡焉用宰牛刀”的感觉</li>
</ul>
<p><font color="LightSkyBlue">#12.猴子排序（Bogo Sort）</font><br>猴子排序，这个排序思路也很风骚，它的思想是：一组数字，随机一次，若随机后的结果不是有序的，再随机一次。。。直到随机的结果是有序的，理论上，只要时间足够长，必定能排好序。就像一组无序的扑克牌，让猴子打乱一次，若还是无序的，猴子再打乱一次。<br>See also 无限猴子定理 ：一只猴子随机敲打打字机键盘，如果时间足够长，总是能打出特定的文本，比如莎士比亚全集。<br>##描述：</p>
<ul>
<li>定义数组 </li>
<li>数组随机 </li>
<li>检验数组是否有序，无序继续，有序了就停止<br>##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Random random &#x3D; new Random();</span><br><span class="line"></span><br><span class="line">public void bogoSort(int[] n) &#123;</span><br><span class="line">    while(!inOrder(n)) shuffle(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void shuffle(int[] n) &#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; n.length; i++) &#123;</span><br><span class="line">        int swapPosition &#x3D; random.nextInt(i + 1);</span><br><span class="line">        int temp &#x3D; n[i];</span><br><span class="line">        n[i] &#x3D; n[swapPosition];</span><br><span class="line">        n[swapPosition] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean inOrder(int[] n) &#123;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; n.length-1; i++) &#123;</span><br><span class="line">        if (n[i] &gt; n[i+1]) return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##C++代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inline void Shuffle()</span><br><span class="line">&#123;</span><br><span class="line">	for(int randnum,i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">		randnum&#x3D;rand()%(n-i+1),</span><br><span class="line">		swap(a[i],a[i+randnum]);</span><br><span class="line">&#125;</span><br><span class="line">inline bool Check()</span><br><span class="line">&#123;</span><br><span class="line">	for(int i&#x3D;2;i&lt;&#x3D;n;i++)</span><br><span class="line">		if(a[i]&lt;a[i-1])</span><br><span class="line">			return false;</span><br><span class="line">	return true;</span><br><span class="line">&#125;</span><br><span class="line">void Bogo_Sort()</span><br><span class="line">&#123;</span><br><span class="line">	while(!Check())</span><br><span class="line">		Shuffle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font color="LightSkyBlue">#13.面条排序（Spaghetti Sort）</font><br>面条排序呢，它的思想是：一组数字array，再来一把面条，array里的最大值对应面条的高度，数字和面条高度由此可以得到一个系数，这个系数就是数字数值和面条高度的映射关系（比如，数字是 1到10，面条是十根，每一根面条都是高度10，那这个系数就是1），array里的数字对应每一根面条，再把多出的高度给折掉，最终就得到长短不一的十根面条，然后把十根面条放桌子上端平，用手平行于桌面，从上往下，最先碰到手的，先拿开。这样面条排好序了，array也排好序了。<br>##代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void noodleSort(int[] arr) &#123;</span><br><span class="line">      &#x2F;** 模拟手 *&#x2F;</span><br><span class="line">      int hand&#x3D;arr[0];</span><br><span class="line">      &#x2F;** 获取最小值 模拟桌子 防止手一直运动*&#x2F;</span><br><span class="line">      int min&#x3D;arr[0];</span><br><span class="line">      &#x2F;** 将最大值赋给变量  *&#x2F;</span><br><span class="line">      for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">          if(hand&lt;arr[i]) &#123;</span><br><span class="line">              hand&#x3D;arr[i];</span><br><span class="line">          &#125;</span><br><span class="line">          if(min&gt;arr[i]) &#123;</span><br><span class="line">              min&#x3D;arr[i];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      for (int i &#x3D; arr.length-1; hand&gt;&#x3D;min; hand--) &#123;</span><br><span class="line">          for (int j &#x3D; 0; j &lt;&#x3D; i; j++) &#123;</span><br><span class="line">              if(hand&#x3D;&#x3D;arr[j]) &#123;</span><br><span class="line">                  &#x2F;** j为什么要-- 防止交换的数字本身也等于hand *&#x2F;</span><br><span class="line">                  arr[j--]&#x3D;arr[i];</span><br><span class="line">                  arr[i--]&#x3D;hand;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><font color="LightSkyBlue">#14.拓扑排序</font><br>实际上，拓扑排序是一种图论算法，该算法在《数据结构与算法》一书中有涉猎。引用维基百科的定义：<br>在图论中，由一个有向无环图的顶点组成的序列，当且仅当满足下列条件时，称为该图的一个拓扑排序。<br>（1）每个顶点出现且只出现一次；<br>（2）若A在序列中排在B的前面，则在图中不存在从B到A的路径。<br>也可以定义为：拓扑排序是对有向无环图的顶点的一种排序，它使得如果存在一条从顶点A到顶点B的路径，那么在排序中B出现在A的后面。<br>##描述：</p>
<ol>
<li>在有向图中选一个没有前驱的顶点并且输出</li>
<li>从图中删除该顶点和所有以它为尾的弧（白话就是：删除所有和它有关的边）</li>
<li>重复上述两步，直至所有顶点输出，或者当前图中不存在无前驱的顶点为止，后者代表我们的有向图是有环的，因此，也可以通过拓扑排序来判断一个图是否有环。</li>
</ol>
<p>##C++代码实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">vector&lt;int&gt;edge[30010],ans;</span><br><span class="line">priority_queue&lt;int&gt;q;</span><br><span class="line">int in[30010];</span><br><span class="line">int T,n,m;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        edge[i].clear();</span><br><span class="line">        in[i]&#x3D;0;</span><br><span class="line">    &#125;</span><br><span class="line">    while(!q.empty()) q.pop();</span><br><span class="line">    ans.clear();</span><br><span class="line">&#125;</span><br><span class="line">void solve()</span><br><span class="line">&#123;</span><br><span class="line">    int i,j;</span><br><span class="line">    for(i&#x3D;1;i&lt;&#x3D;n;i++)</span><br><span class="line">        if(in[i]&#x3D;&#x3D;0) q.push(i);</span><br><span class="line">    while(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int p&#x3D;q.top(); q.pop();</span><br><span class="line">        ans.push_back(p);</span><br><span class="line">        for( i&#x3D;0; i&lt;edge[p].size(); i++ )</span><br><span class="line">        &#123;</span><br><span class="line">            int v&#x3D;edge[p][i];</span><br><span class="line">            in[v]--;</span><br><span class="line">            if(in[v]&#x3D;&#x3D;0) q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;ans.size()-1;i&gt;0;i--)</span><br><span class="line">        printf(&quot;%d &quot;,ans[i]);</span><br><span class="line">    printf(&quot;%d\n&quot;,ans[0]);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a,b;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;T);</span><br><span class="line">    while(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">        init();</span><br><span class="line">        while(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">            edge[b].push_back(a);</span><br><span class="line">            in[a]++;</span><br><span class="line">        &#125;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们说快速排序是不稳定的，这是因为最后的快排结果中相同元素的出现顺序和排序前不一致了。如果用偏序的概念可以这样解释这一现象：相同值的元素之间的关系是无法确定的。因此它们在最终的结果中的出现顺序可以是任意的。而对于诸如插入排序这种稳定性排序，它们对于值相同的元素，还有一个潜在的比较方式，即比较它们的出现顺序，出现靠前的元素大于出现后出现的元素。因此通过这一潜在的比较，将偏序关系转换为了全序关系，从而保证了结果的唯一性。而拓扑排序就是一种将偏序转换为全序的一种算法。<br>偏序：有向图中两个顶点之间不存在环路，至于连通与否，是无所谓的。<br>全序：就是在偏序的基础之上，有向无环图中的任意一对顶点还需要有明确的关系(反映在图中，就是单向连通的关系，注意不能双向连通，那就成环了)。<br>意思就是讲，一个不确定的偏序关系经全序后就有一种确定的先后顺序了。<br>拓扑排序实质上就是一种偏序到全序的排序算法。</p>
<p><font color="LightSkyBlue">#15.珠排序</font><br>每当播完算盘时，都会将算盘立起来复原算盘。珠算法的原理跟算盘立起的动作相关。</p>
<ul>
<li>将数组的数字转换为每行的珠的个数。</li>
<li>将每行的珠子都用签子串起来。</li>
<li>此时立起所有的签子，会自动的将珠进行排序。</li>
<li>例如下图：当立起签子时，上方6的珠子会往下方落。</li>
</ul>
<p>O(1)：即所有珠子都同时移动，但这种算法只是概念上的，无法在计算机中实现。<br>O(√n)：在真实的物理世界中用引力实现，所需时间正比于珠子最大高度的平方根，而最大高度正比于n。<br>O(n)：一次移动一列珠子，可以用模拟和数字的硬件实现。<br>O(S)，S是所有输入数据的和：一次移动一个珠子，能在软件中实现。<br>##C代码实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"> </span><br><span class="line">void bead_sort(int *a, int len)</span><br><span class="line">&#123;</span><br><span class="line">	int i, j, max, sum;</span><br><span class="line">	unsigned char *beads;</span><br><span class="line">#	define BEAD(i, j) beads[i * max + j]</span><br><span class="line"> </span><br><span class="line">	for (i &#x3D; 1, max &#x3D; a[0]; i &lt; len; i++)</span><br><span class="line">		if (a[i] &gt; max) max &#x3D; a[i];</span><br><span class="line"> </span><br><span class="line">	beads &#x3D;(unsigned char*)calloc(1, max * len);</span><br><span class="line"> </span><br><span class="line">	&#x2F;* mark the beads *&#x2F;</span><br><span class="line">	for (i &#x3D; 0; i &lt; len; i++)</span><br><span class="line">		for (j &#x3D; 0; j &lt; a[i]; j++)</span><br><span class="line">			BEAD(i, j) &#x3D; 1;</span><br><span class="line"> </span><br><span class="line">	for (j &#x3D; 0; j &lt; max; j++) &#123;</span><br><span class="line">		&#x2F;* count how many beads are on each post *&#x2F;</span><br><span class="line">		for (sum &#x3D; i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">			sum +&#x3D; BEAD(i, j);</span><br><span class="line">			BEAD(i, j) &#x3D; 0;</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;* mark bottom sum beads *&#x2F;</span><br><span class="line">		for (i &#x3D; len - sum; i &lt; len; i++) BEAD(i, j) &#x3D; 1;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	for (i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">		for (j &#x3D; 0; j &lt; max &amp;&amp; BEAD(i, j); j++);</span><br><span class="line">		a[i] &#x3D; j;</span><br><span class="line">	&#125;</span><br><span class="line">	free(beads);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int i, x[] &#x3D; &#123;5, 3, 1, 7, 4, 1, 1, 20&#125;;</span><br><span class="line">	int len &#x3D; sizeof(x)&#x2F;sizeof(x[0]);</span><br><span class="line"> </span><br><span class="line">	bead_sort(x, len);</span><br><span class="line">	for (i &#x3D; 0; i &lt; len; i++)</span><br><span class="line">		printf(&quot;%d\n&quot;, x[i]);</span><br><span class="line"> </span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>Java</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>‘typora的一些写法</title>
    <url>/2021/05/29/%E2%80%98typora%E7%9A%84%E4%B8%80%E4%BA%9B%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Markdown语法（Typora）：</p>
<p>1.标题</p>
<p>#一级标题  例：</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>—快捷键：Ctrl+1</p>
<p>##二级标题 例：</p>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>—快捷键：Ctrl+2</p>
<p>###三级标题 例：</p>
<h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>—快捷键：Ctrl+3</p>
<p>####四级标题 例：</p>
<h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p>—快捷键：Ctrl+4</p>
<p>#####五级标题 例：</p>
<h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><p>—快捷键：Ctrl+5</p>
<p>######六级标题 例：</p>
<h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>—快捷键：Ctrl+6</p>
<p>最后一个#要与文字间隔空格</p>
<p>2.粗体，斜体，删除线，下划线</p>
<p>斜体：       *号加在内容两边        快捷键：Ctrl+I</p>
<p>粗体：      **号加在内容两边       快捷键：Ctrl+B</p>
<p>加粗斜体：***号加在内容两边</p>
<p>删除线：  ~~号加在内容两边       快捷键：Alt+Shift+5</p>
<p>下划线：快捷键：Ctrl+U</p>
<p>3.引用块</p>
<p>文字引用：      &gt;内容</p>
<p>4.代码块</p>
<p>’行内代码‘          快捷键：Ctrl+Shift+‘</p>
<p>’‘’</p>
<p>多行代码           快捷键：Ctrl+Shift+K</p>
<p>多行代码           (`是英文输入状态下)</p>
<p>‘’‘</p>
<p>5.公式块</p>
<p>$$ 数学公式 $$          快捷键： Ctrl+Shift+M</p>
<p>6.分割线</p>
<p>（1）：- - -</p>
<p>（2）：+ + +</p>
<p>（3）：* * *</p>
<p>7.列表</p>
<p>有序：1.       快捷键：Ctrl+Shift+[</p>
<p>无序：*        快捷键：Ctrl+Shift+]</p>
<p>​           +</p>
<p>​           -</p>
<p>8.表格</p>
<p>表头1|表头2                  快捷键：Ctrl+T</p>
<p>-|-|-</p>
<p>内容11|内容12</p>
<p>内容21|内容22</p>
<p>9.超链接</p>
<p>方法一：[想要链接的文字] (链接的地址 “链接描述”)</p>
<p> 方法二：&lt;链接地址&gt; </p>
<p>快捷键：Ctrl+K</p>
<p>10.图片</p>
<p>![图片文字] (图片地址 “图片描述”) </p>
<p>例如：![示例图片] (链接网址 “示例图片”)</p>
<p>注：插入图片时，要保证图片在与title同名的文件夹里，即可使用对应的图片添加代码↑</p>
<p>头部的设置：</p>
<p>在每篇利用 Hexo 创建的文章的开头，都会有对文章进行说明的文字，叫做 文章头部文章的头部除了可以设置文章标题、发布日期等基础信息外，还可以为文章添加标签、分类等</p>
<p>一个简单的示例如下：</p>
<p>title: Title </p>
<p>date: YYYY-MM-DD HH:MM:SS </p>
<p>tags: [tag1, tag2, …] </p>
<p>categories: category</p>
<p>注：属性和属性值之间必须有一个空格，否则会解析错误</p>
<p>模板设置：</p>
<p>当我们使用命令 <code>hexo new &quot;title&quot;</code> 创建文章时，Hexo 会根据 <code>/scaffolds/post.md</code> 对新文章进行初始化</p>
<p>换言之，<code>/scaffolds/post.md</code> 就是新文章的 <strong>模板</strong>，所以我们可以修改它来适应自己的写作习惯</p>
<p>一个简单的示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: </span><br><span class="line">categories:</span><br></pre></td></tr></table></figure>



<p>首页显示：</p>
<p>利用 Hexo 框架搭建的博客网站中，首页会显示文章的内容，且默认显示文章的全部内容</p>
<p>如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简</p>
<p>这时，我们只需在文章中使用&lt;! –more–&gt; 标志即可，表示只会显示标志前面的内容</p>
]]></content>
      <categories>
        <category>练习</category>
      </categories>
      <tags>
        <tag>typora</tag>
      </tags>
  </entry>
</search>
