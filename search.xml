<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第一次使用</title>
    <url>/2020/06/25/%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/</url>
    <content><![CDATA[<p> 第一次用，实验看看能不能成功……<br> <img src="/2020/06/25/%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/abc.jpg" alt></p>
]]></content>
      <categories>
        <category>练习</category>
      </categories>
      <tags>
        <tag>随手乱写</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>算法排序的收集</title>
    <url>/2020/08/16/%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8F%E7%9A%84%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p><font color="LightSkyBlue">#一些术语</font></p>
<ul>
<li>稳定 ：如果a原本在b前面，而a=b，排序之后a仍然在b的前面</li>
<li><ul>
<li>不稳定 ：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面</li>
</ul>
</li>
<li>内排序 ：所有排序操作都在内存中完成</li>
<li>外排序 ：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li>
<li>时间复杂度 ： 一个算法执行所耗费的时间；</li>
<li>空间复杂度 ：运行完一个程序所需内存的大小；</li>
<li>n: 数据规模</li>
<li>k: “桶”的个数</li>
<li>In-place: 占用常数内存，不占用额外内存</li>
<li>Out-place: 占用额外内存<a id="more"></a>

</li>
</ul>
<p><font color="LightSkyBlue">#1.冒泡排序（Bubble Sort）</font><br>时间复杂度：O（n）【最好】——O（n^2）【最坏】，空间复杂度：O（1），排序方式：In-place，稳定；<br>属于内部排序的交换排序。<br>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。<br>##描述：</p>
<ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>
<li>针对所有的元素重复以上的步骤，除了最后一个；</li>
<li>重复步骤1~3，直到排序完成。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function bubbleSort(arr) &#123;</span><br><span class="line">    var len &#x3D; arr.length;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        for (var j &#x3D; 0; j &lt; len - 1 - i; j++) &#123;</span><br><span class="line">            if (arr[j] &gt; arr[j+1]) &#123;        &#x2F;&#x2F; 相邻元素两两对比</span><br><span class="line">                var temp &#x3D; arr[j+1];        &#x2F;&#x2F; 元素交换</span><br><span class="line">                arr[j+1] &#x3D; arr[j];</span><br><span class="line">                arr[j] &#x3D; temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] bubbleSort(int[] array) &#123;</span><br><span class="line">    if (array.length &#x3D;&#x3D; 0)</span><br><span class="line">        return array;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; array.length; i++)</span><br><span class="line">        for (int j &#x3D; 0; j &lt; array.length - 1 - i; j++)</span><br><span class="line">            if (array[j + 1] &lt; array[j]) &#123;</span><br><span class="line">                int temp &#x3D; array[j + 1];</span><br><span class="line">                array[j + 1] &#x3D; array[j];</span><br><span class="line">                array[j] &#x3D; temp;</span><br><span class="line">            &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><font color="LightSkyBlue">#2.选择排序（Selection Sort）</font><br>时间复杂度：O（n^2）【最好】——O（n^2）【最坏】，空间复杂度：O（1），排序方式：In-place，不稳定<br>属于内部排序。<br>选择排序是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。<br>##描述：<br>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p>
<ul>
<li>初始状态：无序区为R[1..n]，有序区为空；</li>
<li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li>
<li>n-1趟结束，数组有序化了。<br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function selectionSort(arr) &#123;</span><br><span class="line">    var len &#x3D; arr.length;</span><br><span class="line">    var minIndex, temp;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; len - 1; i++) &#123;</span><br><span class="line">        minIndex &#x3D; i;</span><br><span class="line">        for (var j &#x3D; i + 1; j &lt; len; j++) &#123;</span><br><span class="line">            if (arr[j] &lt; arr[minIndex]) &#123;     &#x2F;&#x2F; 寻找最小的数</span><br><span class="line">                minIndex &#x3D; j;                 &#x2F;&#x2F; 将最小数的索引保存</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp &#x3D; arr[i];</span><br><span class="line">        arr[i] &#x3D; arr[minIndex];</span><br><span class="line">        arr[minIndex] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] selectionSort(int[] array) &#123;</span><br><span class="line">    if (array.length &#x3D;&#x3D; 0)</span><br><span class="line">        return array;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; array.length; i++) &#123;</span><br><span class="line">        int minIndex &#x3D; i;</span><br><span class="line">        for (int j &#x3D; i; j &lt; array.length; j++) &#123;</span><br><span class="line">            if (array[j] &lt; array[minIndex]) &#x2F;&#x2F;找到最小的数</span><br><span class="line">                minIndex &#x3D; j; &#x2F;&#x2F;将最小数的索引保存</span><br><span class="line">        &#125;</span><br><span class="line">        int temp &#x3D; array[minIndex];</span><br><span class="line">        array[minIndex] &#x3D; array[i];</span><br><span class="line">        array[i] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</li>
</ul>
<p><font color="LightSkyBlue">#3.插入排序（Insertion Sort）</font><br>时间复杂度：O（n）【最好】——O（n^2）【最坏】，空间复杂度：O（1），排序方式：In-place，稳定<br>属于内部排序。<br>插入排序的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。<br>##描述：<br>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>
<ul>
<li>从第一个元素开始，该元素可以认为已经被排序；</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li>
<li>将新元素插入到该位置后；</li>
<li>重复步骤2~5。<br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function insertionSort(arr) &#123;</span><br><span class="line">    var len &#x3D; arr.length;</span><br><span class="line">    var preIndex, current;</span><br><span class="line">    for (var i &#x3D; 1; i &lt; len; i++) &#123;</span><br><span class="line">        preIndex &#x3D; i - 1;</span><br><span class="line">        current &#x3D; arr[i];</span><br><span class="line">        while (preIndex &gt;&#x3D; 0 &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">            arr[preIndex + 1] &#x3D; arr[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex + 1] &#x3D; current;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] insertionSort(int[] array) &#123;</span><br><span class="line">    if (array.length &#x3D;&#x3D; 0)</span><br><span class="line">        return array;</span><br><span class="line">    int current;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; array.length - 1; i++) &#123;</span><br><span class="line">        current &#x3D; array[i + 1];</span><br><span class="line">        int preIndex &#x3D; i;</span><br><span class="line">        while (preIndex &gt;&#x3D; 0 &amp;&amp; current &lt; array[preIndex]) &#123;</span><br><span class="line">            array[preIndex + 1] &#x3D; array[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        array[preIndex + 1] &#x3D; current;</span><br><span class="line">    &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</li>
</ul>
<p><font color="LightSkyBlue">#4.希尔排序（Shell Sort）</font><br>时间复杂度：O（n log^2 n）【最好】——O（n log^2 n）【最好】，空间复杂度：O（1）；排序方式：In-place，不稳定<br>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。<br>##描述：<br>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>
<ul>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li>
<li>按增量序列个数k，对序列进行k 趟排序；</li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。<br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function shellSort(arr) &#123;</span><br><span class="line">    var len &#x3D; arr.length;</span><br><span class="line">    for (var gap &#x3D; Math.floor(len &#x2F; 2); gap &gt; 0; gap &#x3D; Math.floor(gap &#x2F; 2)) &#123;</span><br><span class="line">        &#x2F;&#x2F; 注意：这里和动图演示的不一样，动图是分组执行，实际操作是多个分组交替执行</span><br><span class="line">        for (var i &#x3D; gap; i &lt; len; i++) &#123;</span><br><span class="line">            var j &#x3D; i;</span><br><span class="line">            var current &#x3D; arr[i];</span><br><span class="line">            while (j - gap &gt;&#x3D; 0 &amp;&amp; current &lt; arr[j - gap]) &#123;</span><br><span class="line">                 arr[j] &#x3D; arr[j - gap];</span><br><span class="line">                 j &#x3D; j - gap; </span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] &#x3D; current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] ShellSort(int[] array) &#123;</span><br><span class="line">    int len &#x3D; array.length;</span><br><span class="line">    int temp, gap &#x3D; len &#x2F; 2;</span><br><span class="line">    while (gap &gt; 0) &#123;</span><br><span class="line">        for (int i &#x3D; gap; i &lt; len; i++) &#123;</span><br><span class="line">            temp &#x3D; array[i];</span><br><span class="line">            int preIndex &#x3D; i - gap;</span><br><span class="line">            while (preIndex &gt;&#x3D; 0 &amp;&amp; array[preIndex] &gt; temp) &#123;</span><br><span class="line">                array[preIndex + gap] &#x3D; array[preIndex];</span><br><span class="line">                preIndex -&#x3D; gap;</span><br><span class="line">            &#125;</span><br><span class="line">            array[preIndex + gap] &#x3D; temp;</span><br><span class="line">        &#125;</span><br><span class="line">        gap &#x2F;&#x3D; 2;</span><br><span class="line">    &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的。</li>
</ul>
<p><font color="LightSkyBlue">#5.归并排序（Merge Sort）</font><br>时间复杂度：O（n log n）【最好】——O（n log n）【最好】，空间复杂度：O（n）；排序方式：Out-place，稳定<br>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。<br>##描述：</p>
<ul>
<li>把长度为n的输入序列分成两个长度为n/2的子序列；</li>
<li>对这两个子序列分别采用归并排序；</li>
<li>将两个排序好的子序列合并成一个最终的排序序列。<br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function mergeSort(arr) &#123;</span><br><span class="line">    var len &#x3D; arr.length;</span><br><span class="line">    if (len &lt; 2) &#123;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">    var middle &#x3D; Math.floor(len &#x2F; 2),</span><br><span class="line">        left &#x3D; arr.slice(0, middle),</span><br><span class="line">        right &#x3D; arr.slice(middle);</span><br><span class="line">    return merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function merge(left, right) &#123;</span><br><span class="line">    var result &#x3D; [];</span><br><span class="line"> </span><br><span class="line">    while (left.length&gt;0 &amp;&amp; right.length&gt;0) &#123;</span><br><span class="line">        if (left[0] &lt;&#x3D; right[0]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    while (left.length)</span><br><span class="line">        result.push(left.shift());</span><br><span class="line"> </span><br><span class="line">    while (right.length)</span><br><span class="line">        result.push(right.shift());</span><br><span class="line"> </span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] MergeSort(int[] array) &#123;</span><br><span class="line">    if (array.length &lt; 2) return array;</span><br><span class="line">    int mid &#x3D; array.length &#x2F; 2;</span><br><span class="line">    int[] left &#x3D; Arrays.copyOfRange(array, 0, mid);</span><br><span class="line">    int[] right &#x3D; Arrays.copyOfRange(array, mid, array.length);</span><br><span class="line">    return merge(MergeSort(left), MergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line">public static int[] merge(int[] left, int[] right) &#123;</span><br><span class="line">    int[] result &#x3D; new int[left.length + right.length];</span><br><span class="line">    for (int index &#x3D; 0, i &#x3D; 0, j &#x3D; 0; index &lt; result.length; index++) &#123;</span><br><span class="line">        if (i &gt;&#x3D; left.length)</span><br><span class="line">            result[index] &#x3D; right[j++];</span><br><span class="line">        else if (j &gt;&#x3D; right.length)</span><br><span class="line">            result[index] &#x3D; left[i++];</span><br><span class="line">        else if (left[i] &gt; right[j])</span><br><span class="line">            result[index] &#x3D; right[j++];</span><br><span class="line">        else</span><br><span class="line">            result[index] &#x3D; left[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。</li>
</ul>
<p><font color="LightSkyBlue">#6.快速排序（Quick Sort）</font><br>时间复杂度：O（n log n）【最好】——O（n^2）【最坏】，空间复杂度：O（log n），排序方式：In-place，不稳定<br>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。<br>##描述：<br>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p>
<ul>
<li>从数列中挑出一个元素，称为 “基准”（pivot）；</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。<br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function quickSort(arr, left, right) &#123;</span><br><span class="line">    var len &#x3D; arr.length,</span><br><span class="line">        partitionIndex,</span><br><span class="line">        left &#x3D; typeof left !&#x3D; &#39;number&#39; ? 0 : left,</span><br><span class="line">        right &#x3D; typeof right !&#x3D; &#39;number&#39; ? len - 1 : right;</span><br><span class="line"> </span><br><span class="line">    if (left &lt; right) &#123;</span><br><span class="line">        partitionIndex &#x3D; partition(arr, left, right);</span><br><span class="line">        quickSort(arr, left, partitionIndex-1);</span><br><span class="line">        quickSort(arr, partitionIndex+1, right);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function partition(arr, left ,right) &#123;     &#x2F;&#x2F; 分区操作</span><br><span class="line">    var pivot &#x3D; left,                      &#x2F;&#x2F; 设定基准值（pivot）</span><br><span class="line">        index &#x3D; pivot + 1;</span><br><span class="line">    for (var i &#x3D; index; i &lt;&#x3D; right; i++) &#123;</span><br><span class="line">        if (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">            swap(arr, i, index);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, pivot, index - 1);</span><br><span class="line">    return index-1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function swap(arr, i, j) &#123;</span><br><span class="line">    var temp &#x3D; arr[i];</span><br><span class="line">    arr[i] &#x3D; arr[j];</span><br><span class="line">    arr[j] &#x3D; temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] QuickSort(int[] array, int start, int end) &#123;</span><br><span class="line">    if (array.length &lt; 1 || start &lt; 0 || end &gt;&#x3D; array.length || start &gt; end) return null;</span><br><span class="line">    int smallIndex &#x3D; partition(array, start, end);</span><br><span class="line">    if (smallIndex &gt; start)</span><br><span class="line">        QuickSort(array, start, smallIndex - 1);</span><br><span class="line">    if (smallIndex &lt; end)</span><br><span class="line">        QuickSort(array, smallIndex + 1, end);</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br><span class="line">public static int partition(int[] array, int start, int end) &#123;</span><br><span class="line">    int pivot &#x3D; (int) (start + Math.random() * (end - start + 1));</span><br><span class="line">    int smallIndex &#x3D; start - 1;</span><br><span class="line">    swap(array, pivot, end);</span><br><span class="line">    for (int i &#x3D; start; i &lt;&#x3D; end; i++)</span><br><span class="line">        if (array[i] &lt;&#x3D; array[end]) &#123;</span><br><span class="line">            smallIndex++;</span><br><span class="line">            if (i &gt; smallIndex)</span><br><span class="line">                swap(array, i, smallIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    return smallIndex;</span><br><span class="line">&#125;</span><br><span class="line">public static void swap(int[] array, int i, int j) &#123;</span><br><span class="line">    int temp &#x3D; array[i];</span><br><span class="line">    array[i] &#x3D; array[j];</span><br><span class="line">    array[j] &#x3D; temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><font color="LightSkyBlue">#7.堆排序（Heap Sort）</font><br>时间复杂度：O（n log n）【最好】——O（n log n）【最坏】，空间复杂度：O（1），排序方式：In-place，不稳定<br>堆排序是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。<br>##描述：</p>
<ul>
<li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li>
<li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li>
<li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。<br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	var len;    &#x2F;&#x2F; 因为声明的多个函数都需要数据长度，所以把len设置成为全局变量 </span><br><span class="line">function buildMaxHeap(arr) &#123;   &#x2F;&#x2F; 建立大顶堆</span><br><span class="line">    len &#x3D; arr.length;</span><br><span class="line">    for (var i &#x3D; Math.floor(len&#x2F;2); i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">        heapify(arr, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function heapify(arr, i) &#123;     &#x2F;&#x2F; 堆调整</span><br><span class="line">    var left &#x3D; 2 * i + 1,</span><br><span class="line">        right &#x3D; 2 * i + 2,</span><br><span class="line">        largest &#x3D; i;</span><br><span class="line"> </span><br><span class="line">    if (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest &#x3D; left;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    if (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest &#x3D; right;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    if (largest !&#x3D; i) &#123;</span><br><span class="line">        swap(arr, i, largest);</span><br><span class="line">        heapify(arr, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function swap(arr, i, j) &#123;</span><br><span class="line">    var temp &#x3D; arr[i];</span><br><span class="line">    arr[i] &#x3D; arr[j];</span><br><span class="line">    arr[j] &#x3D; temp;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function heapSort(arr) &#123;</span><br><span class="line">    buildMaxHeap(arr);</span><br><span class="line"> </span><br><span class="line">    for (var i &#x3D; arr.length - 1; i &gt; 0; i--) &#123;</span><br><span class="line">        swap(arr, 0, i);</span><br><span class="line">        len--;</span><br><span class="line">        heapify(arr, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] HeapSort(int[] array) &#123;</span><br><span class="line">    len &#x3D; array.length;</span><br><span class="line">    if (len &lt; 1) return array;</span><br><span class="line">    &#x2F;&#x2F;1.构建一个最大堆</span><br><span class="line">    buildMaxHeap(array);</span><br><span class="line">    &#x2F;&#x2F;2.循环将堆首位（最大值）与末位交换，然后在重新调整最大堆</span><br><span class="line">    while (len &gt; 0) &#123;</span><br><span class="line">        swap(array, 0, len - 1);</span><br><span class="line">        len--;</span><br><span class="line">        adjustHeap(array, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br><span class="line">public static void buildMaxHeap(int[] array) &#123;</span><br><span class="line">    &#x2F;&#x2F;从最后一个非叶子节点开始向上构造最大堆</span><br><span class="line">    &#x2F;&#x2F;for循环这样写会更好一点：i的左子树和右子树分别2i+1和2(i+1)</span><br><span class="line">    for (int i &#x3D; (len&#x2F;2- 1); i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">        adjustHeap(array, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void adjustHeap(int[] array, int i) &#123;</span><br><span class="line">    int maxIndex &#x3D; i;</span><br><span class="line">    &#x2F;&#x2F;如果有左子树，且左子树大于父节点，则将最大指针指向左子树</span><br><span class="line">    if (i * 2 &lt; len &amp;&amp; array[i * 2] &gt; array[maxIndex])</span><br><span class="line">        maxIndex &#x3D; i * 2 + 1;</span><br><span class="line">    &#x2F;&#x2F;如果有右子树，且右子树大于父节点，则将最大指针指向右子树</span><br><span class="line">    if (i * 2 + 1 &lt; len &amp;&amp; array[i * 2 + 1] &gt; array[maxIndex])</span><br><span class="line">        maxIndex &#x3D; i * 2 + 2; </span><br><span class="line">    &#x2F;&#x2F;如果父节点不是最大值，则将父节点与最大值交换，并且递归调整与父节点交换的位置。</span><br><span class="line">    if (maxIndex !&#x3D; i) &#123;</span><br><span class="line">        swap(array, maxIndex, i);</span><br><span class="line">        adjustHeap(array, maxIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><font color="LightSkyBlue">#8.计数排序（Counting Sort）</font><br>时间复杂度：O（n+k）【最好】——O（n+k）【最坏】，空间复杂度：O（k），排序方式：Out-place，稳定<br>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。<br>##描述：</p>
<ul>
<li>找出待排序的数组中最大和最小的元素；</li>
<li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li>
<li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li>
<li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。<br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function countingSort(arr, maxValue) &#123;</span><br><span class="line">    var bucket &#x3D; new Array(maxValue + 1),</span><br><span class="line">        sortedIndex &#x3D; 0;</span><br><span class="line">        arrLen &#x3D; arr.length,</span><br><span class="line">        bucketLen &#x3D; maxValue + 1;</span><br><span class="line"> </span><br><span class="line">    for (var i &#x3D; 0; i &lt; arrLen; i++) &#123;</span><br><span class="line">        if (!bucket[arr[i]]) &#123;</span><br><span class="line">            bucket[arr[i]] &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        bucket[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    for (var j &#x3D; 0; j &lt; bucketLen; j++) &#123;</span><br><span class="line">        while(bucket[j] &gt; 0) &#123;</span><br><span class="line">            arr[sortedIndex++] &#x3D; j;</span><br><span class="line">            bucket[j]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int[] CountingSort(int[] array) &#123;</span><br><span class="line">        if (array.length &#x3D;&#x3D; 0) return array;</span><br><span class="line">        int bias, min &#x3D; array[0], max &#x3D; array[0];</span><br><span class="line">        for (int i &#x3D; 1; i &lt; array.length; i++) &#123;</span><br><span class="line">            if (array[i] &gt; max)</span><br><span class="line">                max &#x3D; array[i];</span><br><span class="line">            if (array[i] &lt; min)</span><br><span class="line">                min &#x3D; array[i];</span><br><span class="line">        &#125;</span><br><span class="line">        bias &#x3D; 0 - min;</span><br><span class="line">        int[] bucket &#x3D; new int[max - min + 1];</span><br><span class="line">        Arrays.fill(bucket, 0);</span><br><span class="line">        for (int i &#x3D; 0; i &lt; array.length; i++) &#123;</span><br><span class="line">            bucket[array[i] + bias]++;</span><br><span class="line">        &#125;</span><br><span class="line">        int index &#x3D; 0, i &#x3D; 0;</span><br><span class="line">        while (index &lt; array.length) &#123;</span><br><span class="line">            if (bucket[i] !&#x3D; 0) &#123;</span><br><span class="line">                array[index] &#x3D; i - bias;</span><br><span class="line">                bucket[i]--;</span><br><span class="line">                index++;</span><br><span class="line">            &#125; else</span><br><span class="line">                i++;</span><br><span class="line">        &#125;</span><br><span class="line">        return array;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
计数排序是一个稳定的排序算法。当输入的元素是 n 个 0到 k 之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。</li>
</ul>
<p><font color="LightSkyBlue">#9.桶排序（Bucket Sort）</font><br>时间复杂度：O（n+k）【最好】——O（n^2）【最坏】，空间复杂度：O（n+k），排序方式：Out-place，稳定<br>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。<br>##描述：</p>
<ul>
<li>设置一个定量的数组当作空桶；</li>
<li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li>
<li>对每个不是空的桶进行排序；</li>
<li>从不是空的桶里把排好序的数据拼接起来。<br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	function bucketSort(arr, bucketSize) &#123;</span><br><span class="line">    if (arr.length &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">      return arr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    var i;</span><br><span class="line">    var minValue &#x3D; arr[0];</span><br><span class="line">    var maxValue &#x3D; arr[0];</span><br><span class="line">    for (i &#x3D; 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">      if (arr[i] &lt; minValue) &#123;</span><br><span class="line">          minValue &#x3D; arr[i];                &#x2F;&#x2F; 输入数据的最小值</span><br><span class="line">      &#125; else if (arr[i] &gt; maxValue) &#123;</span><br><span class="line">          maxValue &#x3D; arr[i];                &#x2F;&#x2F; 输入数据的最大值</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 桶的初始化</span><br><span class="line">    var DEFAULT_BUCKET_SIZE &#x3D; 5;            &#x2F;&#x2F; 设置桶的默认数量为5</span><br><span class="line">    bucketSize &#x3D; bucketSize || DEFAULT_BUCKET_SIZE;</span><br><span class="line">    var bucketCount &#x3D; Math.floor((maxValue - minValue) &#x2F; bucketSize) + 1;   </span><br><span class="line">    var buckets &#x3D; new Array(bucketCount);</span><br><span class="line">    for (i &#x3D; 0; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        buckets[i] &#x3D; [];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 利用映射函数将数据分配到各个桶中</span><br><span class="line">    for (i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        buckets[Math.floor((arr[i] - minValue) &#x2F; bucketSize)].push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    arr.length &#x3D; 0;</span><br><span class="line">    for (i &#x3D; 0; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        insertionSort(buckets[i]);                      &#x2F;&#x2F; 对每个桶进行排序，这里使用了插入排序</span><br><span class="line">        for (var j &#x3D; 0; j &lt; buckets[i].length; j++) &#123;</span><br><span class="line">            arr.push(buckets[i][j]);                      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static ArrayList&lt;Integer&gt; BucketSort(ArrayList&lt;Integer&gt; array, int bucketSize) &#123;</span><br><span class="line">        if (array &#x3D;&#x3D; null || array.size() &lt; 2)</span><br><span class="line">            return array;</span><br><span class="line">        int max &#x3D; array.get(0), min &#x3D; array.get(0);&#x2F;&#x2F; 找到最大值最小值</span><br><span class="line">        for (int i &#x3D; 0; i &lt; array.size(); i++) &#123;</span><br><span class="line">            if (array.get(i) &gt; max)</span><br><span class="line">                max &#x3D; array.get(i);</span><br><span class="line">            if (array.get(i) &lt; min)</span><br><span class="line">                min &#x3D; array.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        int bucketCount &#x3D; (max - min) &#x2F; bucketSize + 1;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketArr &#x3D; new ArrayList&lt;&gt;(bucketCount);</span><br><span class="line">        ArrayList&lt;Integer&gt; resultArr &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i &#x3D; 0; i &lt; bucketCount; i++) &#123;</span><br><span class="line">            bucketArr.add(new ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; array.size(); i++) &#123;</span><br><span class="line">            bucketArr.get((array.get(i) - min) &#x2F; bucketSize).add(array.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; bucketCount; i++) &#123;</span><br><span class="line">            if (bucketSize &#x3D;&#x3D; 1) &#123; &#x2F;&#x2F; 如果带排序数组中有重复数字时</span><br><span class="line">                for (int j &#x3D; 0; j &lt; bucketArr.get(i).size(); j++)</span><br><span class="line">                    resultArr.add(bucketArr.get(i).get(j));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (bucketCount &#x3D;&#x3D; 1)</span><br><span class="line">                    bucketSize--;</span><br><span class="line">                ArrayList&lt;Integer&gt; temp &#x3D; BucketSort(bucketArr.get(i), bucketSize);</span><br><span class="line">                for (int j &#x3D; 0; j &lt; temp.size(); j++)</span><br><span class="line">                    resultArr.add(temp.get(j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return resultArr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。 </p>
<p><font color="LightSkyBlue">#10.基数排序（Radix Sort）</font><br>时间复杂度：O（n<em>k）【最好】——O（n</em>2）【最坏】，空间复杂度：O（n+k），排序方式：Out-place，稳定<br>属于内部排序。<br>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。<br>##描述：</p>
<ul>
<li>取得数组中的最大数，并取得位数；</li>
<li>arr为原始数组，从最低位开始取每个位组成radix数组；</li>
<li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；<br>##C代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	var counter &#x3D; [];</span><br><span class="line">function radixSort(arr, maxDigit) &#123;</span><br><span class="line">    var mod &#x3D; 10;</span><br><span class="line">    var dev &#x3D; 1;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; maxDigit; i++, dev *&#x3D; 10, mod *&#x3D; 10) &#123;</span><br><span class="line">        for(var j &#x3D; 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">            var bucket &#x3D; parseInt((arr[j] % mod) &#x2F; dev);</span><br><span class="line">            if(counter[bucket]&#x3D;&#x3D;null) &#123;</span><br><span class="line">                counter[bucket] &#x3D; [];</span><br><span class="line">            &#125;</span><br><span class="line">            counter[bucket].push(arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        var pos &#x3D; 0;</span><br><span class="line">        for(var j &#x3D; 0; j &lt; counter.length; j++) &#123;</span><br><span class="line">            var value &#x3D; null;</span><br><span class="line">            if(counter[j]!&#x3D;null) &#123;</span><br><span class="line">                while ((value &#x3D; counter[j].shift()) !&#x3D; null) &#123;</span><br><span class="line">                      arr[pos++] &#x3D; value;</span><br><span class="line">                &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
##Java代码实现<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.	public static int[] RadixSort(int[] array) &#123;</span><br><span class="line">	        if (array &#x3D;&#x3D; null || array.length &lt; 2)</span><br><span class="line">	            return array;</span><br><span class="line">	        &#x2F;&#x2F; 1.先算出最大数的位数；</span><br><span class="line">	        int max &#x3D; array[0];</span><br><span class="line">	        for (int i &#x3D; 1; i &lt; array.length; i++) &#123;</span><br><span class="line">	            max &#x3D; Math.max(max, array[i]);</span><br><span class="line">	        &#125;</span><br><span class="line">	        int maxDigit &#x3D; 0;</span><br><span class="line">	        while (max !&#x3D; 0) &#123;</span><br><span class="line">	            max &#x2F;&#x3D; 10;</span><br><span class="line">	            maxDigit++;</span><br><span class="line">	        &#125;</span><br><span class="line">	        int mod &#x3D; 10, div &#x3D; 1;</span><br><span class="line">	        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketList &#x3D; new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">	        for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">	            bucketList.add(new ArrayList&lt;Integer&gt;());</span><br><span class="line">	        for (int i &#x3D; 0; i &lt; maxDigit; i++, mod *&#x3D; 10, div *&#x3D; 10) &#123;</span><br><span class="line">	            for (int j &#x3D; 0; j &lt; array.length; j++) &#123;</span><br><span class="line">	                int num &#x3D; (array[j] % mod) &#x2F; div;</span><br><span class="line">	                bucketList.get(num).add(array[j]);</span><br><span class="line">	            &#125;</span><br><span class="line">	            int index &#x3D; 0;</span><br><span class="line">	            for (int j &#x3D; 0; j &lt; bucketList.size(); j++) &#123;</span><br><span class="line">	                for (int k &#x3D; 0; k &lt; bucketList.get(j).size(); k++)</span><br><span class="line">	                    array[index++] &#x3D; bucketList.get(j).get(k);</span><br><span class="line">	                bucketList.get(j).clear();</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;</span><br><span class="line">	        return array;</span><br><span class="line">	    &#125;</span><br></pre></td></tr></table></figure>
基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n) ，当然d要远远小于n，因此基本上还是线性级别的。<br>基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n&gt;&gt;k，因此额外空间需要大概n个左右。</li>
</ul>
<p><a href="https://www.bilibili.com/video/BV1bg4y1q7es?from=search&seid=14943951038373601434" target="_blank" rel="noopener">B站排序算法可视化→</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
</search>
